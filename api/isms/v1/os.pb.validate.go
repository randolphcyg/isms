// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/isms/v1/os.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateOSReqMultiError, or
// nil if none found.
func (m *CreateOSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := CreateOSReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 50 {
		err := CreateOSReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetManufacturer()); l < 1 || l > 200 {
		err := CreateOSReqValidationError{
			field:  "Manufacturer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetArchitecture()); l < 1 || l > 20 {
		err := CreateOSReqValidationError{
			field:  "Architecture",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReleaseYear() > 2030 {
		err := CreateOSReqValidationError{
			field:  "ReleaseYear",
			reason: "value must be less than or equal to 2030",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 65535 {
		err := CreateOSReqValidationError{
			field:  "Description",
			reason: "value length must be at most 65535 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOSReqMultiError(errors)
	}

	return nil
}

// CreateOSReqMultiError is an error wrapping multiple validation errors
// returned by CreateOSReq.ValidateAll() if the designated constraints aren't met.
type CreateOSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOSReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOSReqMultiError) AllErrors() []error { return m }

// CreateOSReqValidationError is the validation error returned by
// CreateOSReq.Validate if the designated constraints aren't met.
type CreateOSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOSReqValidationError) ErrorName() string { return "CreateOSReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOSReqValidationError{}

// Validate checks the field values on UpdateOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateOSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateOSReqMultiError, or
// nil if none found.
func (m *UpdateOSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOSReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		err := UpdateOSReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 50 {
		err := UpdateOSReqValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetManufacturer()); l < 1 || l > 200 {
		err := UpdateOSReqValidationError{
			field:  "Manufacturer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetArchitecture()); l < 1 || l > 20 {
		err := UpdateOSReqValidationError{
			field:  "Architecture",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReleaseYear() > 2030 {
		err := UpdateOSReqValidationError{
			field:  "ReleaseYear",
			reason: "value must be less than or equal to 2030",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 65535 {
		err := UpdateOSReqValidationError{
			field:  "Description",
			reason: "value length must be at most 65535 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOSReqMultiError(errors)
	}

	return nil
}

// UpdateOSReqMultiError is an error wrapping multiple validation errors
// returned by UpdateOSReq.ValidateAll() if the designated constraints aren't met.
type UpdateOSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOSReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOSReqMultiError) AllErrors() []error { return m }

// UpdateOSReqValidationError is the validation error returned by
// UpdateOSReq.Validate if the designated constraints aren't met.
type UpdateOSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOSReqValidationError) ErrorName() string { return "UpdateOSReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOSReqValidationError{}

// Validate checks the field values on DeleteOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteOSReqMultiError, or
// nil if none found.
func (m *DeleteOSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOSReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOSReqMultiError(errors)
	}

	return nil
}

// DeleteOSReqMultiError is an error wrapping multiple validation errors
// returned by DeleteOSReq.ValidateAll() if the designated constraints aren't met.
type DeleteOSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOSReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOSReqMultiError) AllErrors() []error { return m }

// DeleteOSReqValidationError is the validation error returned by
// DeleteOSReq.Validate if the designated constraints aren't met.
type DeleteOSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOSReqValidationError) ErrorName() string { return "DeleteOSReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOSReqValidationError{}

// Validate checks the field values on DeleteOSResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOSResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOSResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteOSRespMultiError, or
// nil if none found.
func (m *DeleteOSResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOSResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteOSRespMultiError(errors)
	}

	return nil
}

// DeleteOSRespMultiError is an error wrapping multiple validation errors
// returned by DeleteOSResp.ValidateAll() if the designated constraints aren't met.
type DeleteOSRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOSRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOSRespMultiError) AllErrors() []error { return m }

// DeleteOSRespValidationError is the validation error returned by
// DeleteOSResp.Validate if the designated constraints aren't met.
type DeleteOSRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOSRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOSRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOSRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOSRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOSRespValidationError) ErrorName() string { return "DeleteOSRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOSRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOSResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOSRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOSRespValidationError{}

// Validate checks the field values on GetOSReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOSReqMultiError, or nil
// if none found.
func (m *GetOSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetOSReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOSReqMultiError(errors)
	}

	return nil
}

// GetOSReqMultiError is an error wrapping multiple validation errors returned
// by GetOSReq.ValidateAll() if the designated constraints aren't met.
type GetOSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOSReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOSReqMultiError) AllErrors() []error { return m }

// GetOSReqValidationError is the validation error returned by
// GetOSReq.Validate if the designated constraints aren't met.
type GetOSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOSReqValidationError) ErrorName() string { return "GetOSReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOSReqValidationError{}

// Validate checks the field values on ListOSReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOSReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOSReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOSReqMultiError, or nil
// if none found.
func (m *ListOSReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOSReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListOSReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := ListOSReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Manufacturer

	if len(errors) > 0 {
		return ListOSReqMultiError(errors)
	}

	return nil
}

// ListOSReqMultiError is an error wrapping multiple validation errors returned
// by ListOSReq.ValidateAll() if the designated constraints aren't met.
type ListOSReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOSReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOSReqMultiError) AllErrors() []error { return m }

// ListOSReqValidationError is the validation error returned by
// ListOSReq.Validate if the designated constraints aren't met.
type ListOSReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOSReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOSReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOSReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOSReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOSReqValidationError) ErrorName() string { return "ListOSReqValidationError" }

// Error satisfies the builtin error interface
func (e ListOSReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOSReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOSReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOSReqValidationError{}

// Validate checks the field values on OSResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OSResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OSResp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OSRespMultiError, or nil if none found.
func (m *OSResp) ValidateAll() error {
	return m.validate(true)
}

func (m *OSResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Architecture

	// no validation rules for Manufacturer

	// no validation rules for ReleaseYear

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return OSRespMultiError(errors)
	}

	return nil
}

// OSRespMultiError is an error wrapping multiple validation errors returned by
// OSResp.ValidateAll() if the designated constraints aren't met.
type OSRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OSRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OSRespMultiError) AllErrors() []error { return m }

// OSRespValidationError is the validation error returned by OSResp.Validate if
// the designated constraints aren't met.
type OSRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OSRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OSRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OSRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OSRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OSRespValidationError) ErrorName() string { return "OSRespValidationError" }

// Error satisfies the builtin error interface
func (e OSRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOSResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OSRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OSRespValidationError{}

// Validate checks the field values on ListOSResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOSResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOSResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOSRespMultiError, or
// nil if none found.
func (m *ListOSResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOSResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOSRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOSRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOSRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOSRespMultiError(errors)
	}

	return nil
}

// ListOSRespMultiError is an error wrapping multiple validation errors
// returned by ListOSResp.ValidateAll() if the designated constraints aren't met.
type ListOSRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOSRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOSRespMultiError) AllErrors() []error { return m }

// ListOSRespValidationError is the validation error returned by
// ListOSResp.Validate if the designated constraints aren't met.
type ListOSRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOSRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOSRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOSRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOSRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOSRespValidationError) ErrorName() string { return "ListOSRespValidationError" }

// Error satisfies the builtin error interface
func (e ListOSRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOSResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOSRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOSRespValidationError{}
