// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsOS(db *gorm.DB, opts ...gen.DOOption) ismsOS {
	_ismsOS := ismsOS{}

	_ismsOS.ismsOSDo.UseDB(db, opts...)
	_ismsOS.ismsOSDo.UseModel(&model.IsmsOS{})

	tableName := _ismsOS.ismsOSDo.TableName()
	_ismsOS.ALL = field.NewAsterisk(tableName)
	_ismsOS.ID = field.NewInt32(tableName, "id")
	_ismsOS.Name = field.NewString(tableName, "name")
	_ismsOS.Version = field.NewString(tableName, "version")
	_ismsOS.Architecture = field.NewString(tableName, "architecture")
	_ismsOS.Manufacturer = field.NewString(tableName, "manufacturer")
	_ismsOS.ReleaseYear = field.NewInt32(tableName, "release_year")
	_ismsOS.Description = field.NewString(tableName, "description")
	_ismsOS.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsOS.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ismsOS.fillFieldMap()

	return _ismsOS
}

// ismsOS 操作系统表
type ismsOS struct {
	ismsOSDo ismsOSDo

	ALL          field.Asterisk
	ID           field.Int32  // 自增ID
	Name         field.String // 系统名称（如：Microsoft Windows、Ubuntu）
	Version      field.String // 系统版本（如：7、10、20.04 LTS）
	Architecture field.String // 硬件架构
	Manufacturer field.String // 系统开发商（如：Microsoft、Canonical）
	ReleaseYear  field.Int32  // 发布年份
	Description  field.String // 系统说明（如包含的细分版本）
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i ismsOS) Table(newTableName string) *ismsOS {
	i.ismsOSDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsOS) As(alias string) *ismsOS {
	i.ismsOSDo.DO = *(i.ismsOSDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsOS) updateTableName(table string) *ismsOS {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Name = field.NewString(table, "name")
	i.Version = field.NewString(table, "version")
	i.Architecture = field.NewString(table, "architecture")
	i.Manufacturer = field.NewString(table, "manufacturer")
	i.ReleaseYear = field.NewInt32(table, "release_year")
	i.Description = field.NewString(table, "description")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *ismsOS) WithContext(ctx context.Context) IIsmsOSDo { return i.ismsOSDo.WithContext(ctx) }

func (i ismsOS) TableName() string { return i.ismsOSDo.TableName() }

func (i ismsOS) Alias() string { return i.ismsOSDo.Alias() }

func (i ismsOS) Columns(cols ...field.Expr) gen.Columns { return i.ismsOSDo.Columns(cols...) }

func (i *ismsOS) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsOS) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["version"] = i.Version
	i.fieldMap["architecture"] = i.Architecture
	i.fieldMap["manufacturer"] = i.Manufacturer
	i.fieldMap["release_year"] = i.ReleaseYear
	i.fieldMap["description"] = i.Description
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i ismsOS) clone(db *gorm.DB) ismsOS {
	i.ismsOSDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsOS) replaceDB(db *gorm.DB) ismsOS {
	i.ismsOSDo.ReplaceDB(db)
	return i
}

type ismsOSDo struct{ gen.DO }

type IIsmsOSDo interface {
	gen.SubQuery
	Debug() IIsmsOSDo
	WithContext(ctx context.Context) IIsmsOSDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsOSDo
	WriteDB() IIsmsOSDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsOSDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsOSDo
	Not(conds ...gen.Condition) IIsmsOSDo
	Or(conds ...gen.Condition) IIsmsOSDo
	Select(conds ...field.Expr) IIsmsOSDo
	Where(conds ...gen.Condition) IIsmsOSDo
	Order(conds ...field.Expr) IIsmsOSDo
	Distinct(cols ...field.Expr) IIsmsOSDo
	Omit(cols ...field.Expr) IIsmsOSDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsOSDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsOSDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsOSDo
	Group(cols ...field.Expr) IIsmsOSDo
	Having(conds ...gen.Condition) IIsmsOSDo
	Limit(limit int) IIsmsOSDo
	Offset(offset int) IIsmsOSDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsOSDo
	Unscoped() IIsmsOSDo
	Create(values ...*model.IsmsOS) error
	CreateInBatches(values []*model.IsmsOS, batchSize int) error
	Save(values ...*model.IsmsOS) error
	First() (*model.IsmsOS, error)
	Take() (*model.IsmsOS, error)
	Last() (*model.IsmsOS, error)
	Find() ([]*model.IsmsOS, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsOS, err error)
	FindInBatches(result *[]*model.IsmsOS, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsOS) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsOSDo
	Assign(attrs ...field.AssignExpr) IIsmsOSDo
	Joins(fields ...field.RelationField) IIsmsOSDo
	Preload(fields ...field.RelationField) IIsmsOSDo
	FirstOrInit() (*model.IsmsOS, error)
	FirstOrCreate() (*model.IsmsOS, error)
	FindByPage(offset int, limit int) (result []*model.IsmsOS, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsOSDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsOSDo) Debug() IIsmsOSDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsOSDo) WithContext(ctx context.Context) IIsmsOSDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsOSDo) ReadDB() IIsmsOSDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsOSDo) WriteDB() IIsmsOSDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsOSDo) Session(config *gorm.Session) IIsmsOSDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsOSDo) Clauses(conds ...clause.Expression) IIsmsOSDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsOSDo) Returning(value interface{}, columns ...string) IIsmsOSDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsOSDo) Not(conds ...gen.Condition) IIsmsOSDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsOSDo) Or(conds ...gen.Condition) IIsmsOSDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsOSDo) Select(conds ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsOSDo) Where(conds ...gen.Condition) IIsmsOSDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsOSDo) Order(conds ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsOSDo) Distinct(cols ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsOSDo) Omit(cols ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsOSDo) Join(table schema.Tabler, on ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsOSDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsOSDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsOSDo) Group(cols ...field.Expr) IIsmsOSDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsOSDo) Having(conds ...gen.Condition) IIsmsOSDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsOSDo) Limit(limit int) IIsmsOSDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsOSDo) Offset(offset int) IIsmsOSDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsOSDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsOSDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsOSDo) Unscoped() IIsmsOSDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsOSDo) Create(values ...*model.IsmsOS) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsOSDo) CreateInBatches(values []*model.IsmsOS, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsOSDo) Save(values ...*model.IsmsOS) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsOSDo) First() (*model.IsmsOS, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsOS), nil
	}
}

func (i ismsOSDo) Take() (*model.IsmsOS, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsOS), nil
	}
}

func (i ismsOSDo) Last() (*model.IsmsOS, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsOS), nil
	}
}

func (i ismsOSDo) Find() ([]*model.IsmsOS, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsOS), err
}

func (i ismsOSDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsOS, err error) {
	buf := make([]*model.IsmsOS, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsOSDo) FindInBatches(result *[]*model.IsmsOS, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsOSDo) Attrs(attrs ...field.AssignExpr) IIsmsOSDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsOSDo) Assign(attrs ...field.AssignExpr) IIsmsOSDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsOSDo) Joins(fields ...field.RelationField) IIsmsOSDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsOSDo) Preload(fields ...field.RelationField) IIsmsOSDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsOSDo) FirstOrInit() (*model.IsmsOS, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsOS), nil
	}
}

func (i ismsOSDo) FirstOrCreate() (*model.IsmsOS, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsOS), nil
	}
}

func (i ismsOSDo) FindByPage(offset int, limit int) (result []*model.IsmsOS, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsOSDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsOSDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsOSDo) Delete(models ...*model.IsmsOS) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsOSDo) withDO(do gen.Dao) *ismsOSDo {
	i.DO = *do.(*gen.DO)
	return i
}
