// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsSoftwareIndustry(db *gorm.DB, opts ...gen.DOOption) ismsSoftwareIndustry {
	_ismsSoftwareIndustry := ismsSoftwareIndustry{}

	_ismsSoftwareIndustry.ismsSoftwareIndustryDo.UseDB(db, opts...)
	_ismsSoftwareIndustry.ismsSoftwareIndustryDo.UseModel(&model.IsmsSoftwareIndustry{})

	tableName := _ismsSoftwareIndustry.ismsSoftwareIndustryDo.TableName()
	_ismsSoftwareIndustry.ALL = field.NewAsterisk(tableName)
	_ismsSoftwareIndustry.SoftwareID = field.NewInt32(tableName, "software_id")
	_ismsSoftwareIndustry.IndustryID = field.NewInt32(tableName, "industry_id")
	_ismsSoftwareIndustry.CreatedAt = field.NewTime(tableName, "created_at")

	_ismsSoftwareIndustry.fillFieldMap()

	return _ismsSoftwareIndustry
}

// ismsSoftwareIndustry 软件与行业多对多关联表
type ismsSoftwareIndustry struct {
	ismsSoftwareIndustryDo ismsSoftwareIndustryDo

	ALL        field.Asterisk
	SoftwareID field.Int32 // 软件ID（关联isms_software.id）
	IndustryID field.Int32 // 行业ID（关联isms_industry.id）
	CreatedAt  field.Time  // 关联创建时间

	fieldMap map[string]field.Expr
}

func (i ismsSoftwareIndustry) Table(newTableName string) *ismsSoftwareIndustry {
	i.ismsSoftwareIndustryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsSoftwareIndustry) As(alias string) *ismsSoftwareIndustry {
	i.ismsSoftwareIndustryDo.DO = *(i.ismsSoftwareIndustryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsSoftwareIndustry) updateTableName(table string) *ismsSoftwareIndustry {
	i.ALL = field.NewAsterisk(table)
	i.SoftwareID = field.NewInt32(table, "software_id")
	i.IndustryID = field.NewInt32(table, "industry_id")
	i.CreatedAt = field.NewTime(table, "created_at")

	i.fillFieldMap()

	return i
}

func (i *ismsSoftwareIndustry) WithContext(ctx context.Context) IIsmsSoftwareIndustryDo {
	return i.ismsSoftwareIndustryDo.WithContext(ctx)
}

func (i ismsSoftwareIndustry) TableName() string { return i.ismsSoftwareIndustryDo.TableName() }

func (i ismsSoftwareIndustry) Alias() string { return i.ismsSoftwareIndustryDo.Alias() }

func (i ismsSoftwareIndustry) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsSoftwareIndustryDo.Columns(cols...)
}

func (i *ismsSoftwareIndustry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsSoftwareIndustry) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["software_id"] = i.SoftwareID
	i.fieldMap["industry_id"] = i.IndustryID
	i.fieldMap["created_at"] = i.CreatedAt
}

func (i ismsSoftwareIndustry) clone(db *gorm.DB) ismsSoftwareIndustry {
	i.ismsSoftwareIndustryDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsSoftwareIndustry) replaceDB(db *gorm.DB) ismsSoftwareIndustry {
	i.ismsSoftwareIndustryDo.ReplaceDB(db)
	return i
}

type ismsSoftwareIndustryDo struct{ gen.DO }

type IIsmsSoftwareIndustryDo interface {
	gen.SubQuery
	Debug() IIsmsSoftwareIndustryDo
	WithContext(ctx context.Context) IIsmsSoftwareIndustryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsSoftwareIndustryDo
	WriteDB() IIsmsSoftwareIndustryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsSoftwareIndustryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsSoftwareIndustryDo
	Not(conds ...gen.Condition) IIsmsSoftwareIndustryDo
	Or(conds ...gen.Condition) IIsmsSoftwareIndustryDo
	Select(conds ...field.Expr) IIsmsSoftwareIndustryDo
	Where(conds ...gen.Condition) IIsmsSoftwareIndustryDo
	Order(conds ...field.Expr) IIsmsSoftwareIndustryDo
	Distinct(cols ...field.Expr) IIsmsSoftwareIndustryDo
	Omit(cols ...field.Expr) IIsmsSoftwareIndustryDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo
	Group(cols ...field.Expr) IIsmsSoftwareIndustryDo
	Having(conds ...gen.Condition) IIsmsSoftwareIndustryDo
	Limit(limit int) IIsmsSoftwareIndustryDo
	Offset(offset int) IIsmsSoftwareIndustryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareIndustryDo
	Unscoped() IIsmsSoftwareIndustryDo
	Create(values ...*model.IsmsSoftwareIndustry) error
	CreateInBatches(values []*model.IsmsSoftwareIndustry, batchSize int) error
	Save(values ...*model.IsmsSoftwareIndustry) error
	First() (*model.IsmsSoftwareIndustry, error)
	Take() (*model.IsmsSoftwareIndustry, error)
	Last() (*model.IsmsSoftwareIndustry, error)
	Find() ([]*model.IsmsSoftwareIndustry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareIndustry, err error)
	FindInBatches(result *[]*model.IsmsSoftwareIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsSoftwareIndustry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsSoftwareIndustryDo
	Assign(attrs ...field.AssignExpr) IIsmsSoftwareIndustryDo
	Joins(fields ...field.RelationField) IIsmsSoftwareIndustryDo
	Preload(fields ...field.RelationField) IIsmsSoftwareIndustryDo
	FirstOrInit() (*model.IsmsSoftwareIndustry, error)
	FirstOrCreate() (*model.IsmsSoftwareIndustry, error)
	FindByPage(offset int, limit int) (result []*model.IsmsSoftwareIndustry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsSoftwareIndustryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsSoftwareIndustryDo) Debug() IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsSoftwareIndustryDo) WithContext(ctx context.Context) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsSoftwareIndustryDo) ReadDB() IIsmsSoftwareIndustryDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsSoftwareIndustryDo) WriteDB() IIsmsSoftwareIndustryDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsSoftwareIndustryDo) Session(config *gorm.Session) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsSoftwareIndustryDo) Clauses(conds ...clause.Expression) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsSoftwareIndustryDo) Returning(value interface{}, columns ...string) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsSoftwareIndustryDo) Not(conds ...gen.Condition) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsSoftwareIndustryDo) Or(conds ...gen.Condition) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsSoftwareIndustryDo) Select(conds ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsSoftwareIndustryDo) Where(conds ...gen.Condition) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsSoftwareIndustryDo) Order(conds ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsSoftwareIndustryDo) Distinct(cols ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsSoftwareIndustryDo) Omit(cols ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsSoftwareIndustryDo) Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsSoftwareIndustryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsSoftwareIndustryDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsSoftwareIndustryDo) Group(cols ...field.Expr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsSoftwareIndustryDo) Having(conds ...gen.Condition) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsSoftwareIndustryDo) Limit(limit int) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsSoftwareIndustryDo) Offset(offset int) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsSoftwareIndustryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsSoftwareIndustryDo) Unscoped() IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsSoftwareIndustryDo) Create(values ...*model.IsmsSoftwareIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsSoftwareIndustryDo) CreateInBatches(values []*model.IsmsSoftwareIndustry, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsSoftwareIndustryDo) Save(values ...*model.IsmsSoftwareIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsSoftwareIndustryDo) First() (*model.IsmsSoftwareIndustry, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareIndustry), nil
	}
}

func (i ismsSoftwareIndustryDo) Take() (*model.IsmsSoftwareIndustry, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareIndustry), nil
	}
}

func (i ismsSoftwareIndustryDo) Last() (*model.IsmsSoftwareIndustry, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareIndustry), nil
	}
}

func (i ismsSoftwareIndustryDo) Find() ([]*model.IsmsSoftwareIndustry, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsSoftwareIndustry), err
}

func (i ismsSoftwareIndustryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareIndustry, err error) {
	buf := make([]*model.IsmsSoftwareIndustry, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsSoftwareIndustryDo) FindInBatches(result *[]*model.IsmsSoftwareIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsSoftwareIndustryDo) Attrs(attrs ...field.AssignExpr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsSoftwareIndustryDo) Assign(attrs ...field.AssignExpr) IIsmsSoftwareIndustryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsSoftwareIndustryDo) Joins(fields ...field.RelationField) IIsmsSoftwareIndustryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsSoftwareIndustryDo) Preload(fields ...field.RelationField) IIsmsSoftwareIndustryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsSoftwareIndustryDo) FirstOrInit() (*model.IsmsSoftwareIndustry, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareIndustry), nil
	}
}

func (i ismsSoftwareIndustryDo) FirstOrCreate() (*model.IsmsSoftwareIndustry, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareIndustry), nil
	}
}

func (i ismsSoftwareIndustryDo) FindByPage(offset int, limit int) (result []*model.IsmsSoftwareIndustry, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsSoftwareIndustryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsSoftwareIndustryDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsSoftwareIndustryDo) Delete(models ...*model.IsmsSoftwareIndustry) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsSoftwareIndustryDo) withDO(do gen.Dao) *ismsSoftwareIndustryDo {
	i.DO = *do.(*gen.DO)
	return i
}
