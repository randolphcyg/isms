// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/isms/v1/software.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IsmsSoftware with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsmsSoftware) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsmsSoftware with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsmsSoftwareMultiError, or
// nil if none found.
func (m *IsmsSoftware) ValidateAll() error {
	return m.validate(true)
}

func (m *IsmsSoftware) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetNameZh()) < 1 {
		err := IsmsSoftwareValidationError{
			field:  "NameZh",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NameEn

	// no validation rules for Version

	// no validation rules for ReleaseYear

	// no validation rules for ReleaseMonth

	// no validation rules for ReleaseDay

	// no validation rules for DeveloperId

	// no validation rules for CountryId

	// no validation rules for CountryName

	// no validation rules for DeveloperName

	// no validation rules for CpuReq

	// no validation rules for MemoryMinGb

	// no validation rules for DiskMinGb

	// no validation rules for SysReqOther

	// no validation rules for Description

	// no validation rules for SizeBytes

	// no validation rules for DeploymentMethod

	// no validation rules for ComplianceInfo

	// no validation rules for SecurityInfo

	// no validation rules for IntellectualProperty

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return IsmsSoftwareMultiError(errors)
	}

	return nil
}

// IsmsSoftwareMultiError is an error wrapping multiple validation errors
// returned by IsmsSoftware.ValidateAll() if the designated constraints aren't met.
type IsmsSoftwareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsmsSoftwareMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsmsSoftwareMultiError) AllErrors() []error { return m }

// IsmsSoftwareValidationError is the validation error returned by
// IsmsSoftware.Validate if the designated constraints aren't met.
type IsmsSoftwareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsmsSoftwareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsmsSoftwareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsmsSoftwareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsmsSoftwareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsmsSoftwareValidationError) ErrorName() string { return "IsmsSoftwareValidationError" }

// Error satisfies the builtin error interface
func (e IsmsSoftwareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsmsSoftware.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsmsSoftwareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsmsSoftwareValidationError{}

// Validate checks the field values on CreateSoftwareReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSoftwareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSoftwareReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSoftwareReqMultiError, or nil if none found.
func (m *CreateSoftwareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSoftwareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNameZh()) < 1 {
		err := CreateSoftwareReqValidationError{
			field:  "NameZh",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NameEn

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := CreateSoftwareReqValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ReleaseYear

	// no validation rules for ReleaseMonth

	// no validation rules for ReleaseDay

	if m.GetDeveloperId() <= 0 {
		err := CreateSoftwareReqValidationError{
			field:  "DeveloperId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCountryId() <= 0 {
		err := CreateSoftwareReqValidationError{
			field:  "CountryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CpuReq

	// no validation rules for MemoryMinGb

	// no validation rules for DiskMinGb

	// no validation rules for SysReqOther

	// no validation rules for Description

	// no validation rules for SizeBytes

	// no validation rules for DeploymentMethod

	// no validation rules for ComplianceInfo

	// no validation rules for SecurityInfo

	// no validation rules for IntellectualProperty

	// no validation rules for Status

	if len(m.GetIndustryIds()) < 1 {
		err := CreateSoftwareReqValidationError{
			field:  "IndustryIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetOsIds()) < 1 {
		err := CreateSoftwareReqValidationError{
			field:  "OsIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSoftwareReqMultiError(errors)
	}

	return nil
}

// CreateSoftwareReqMultiError is an error wrapping multiple validation errors
// returned by CreateSoftwareReq.ValidateAll() if the designated constraints
// aren't met.
type CreateSoftwareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSoftwareReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSoftwareReqMultiError) AllErrors() []error { return m }

// CreateSoftwareReqValidationError is the validation error returned by
// CreateSoftwareReq.Validate if the designated constraints aren't met.
type CreateSoftwareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSoftwareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSoftwareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSoftwareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSoftwareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSoftwareReqValidationError) ErrorName() string {
	return "CreateSoftwareReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSoftwareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSoftwareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSoftwareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSoftwareReqValidationError{}

// Validate checks the field values on CreateSoftwareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSoftwareResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSoftwareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSoftwareRespMultiError, or nil if none found.
func (m *CreateSoftwareResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSoftwareResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateSoftwareRespMultiError(errors)
	}

	return nil
}

// CreateSoftwareRespMultiError is an error wrapping multiple validation errors
// returned by CreateSoftwareResp.ValidateAll() if the designated constraints
// aren't met.
type CreateSoftwareRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSoftwareRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSoftwareRespMultiError) AllErrors() []error { return m }

// CreateSoftwareRespValidationError is the validation error returned by
// CreateSoftwareResp.Validate if the designated constraints aren't met.
type CreateSoftwareRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSoftwareRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSoftwareRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSoftwareRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSoftwareRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSoftwareRespValidationError) ErrorName() string {
	return "CreateSoftwareRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSoftwareRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSoftwareResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSoftwareRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSoftwareRespValidationError{}

// Validate checks the field values on UpdateSoftwareReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSoftwareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSoftwareReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSoftwareReqMultiError, or nil if none found.
func (m *UpdateSoftwareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSoftwareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateSoftwareReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NameZh

	// no validation rules for NameEn

	// no validation rules for Version

	// no validation rules for ReleaseYear

	// no validation rules for ReleaseMonth

	// no validation rules for ReleaseDay

	// no validation rules for DeveloperId

	// no validation rules for CountryId

	// no validation rules for CpuReq

	// no validation rules for MemoryMinGb

	// no validation rules for DiskMinGb

	// no validation rules for SysReqOther

	// no validation rules for Description

	// no validation rules for SizeBytes

	// no validation rules for DeploymentMethod

	// no validation rules for ComplianceInfo

	// no validation rules for SecurityInfo

	// no validation rules for IntellectualProperty

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateSoftwareReqMultiError(errors)
	}

	return nil
}

// UpdateSoftwareReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSoftwareReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateSoftwareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSoftwareReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSoftwareReqMultiError) AllErrors() []error { return m }

// UpdateSoftwareReqValidationError is the validation error returned by
// UpdateSoftwareReq.Validate if the designated constraints aren't met.
type UpdateSoftwareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSoftwareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSoftwareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSoftwareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSoftwareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSoftwareReqValidationError) ErrorName() string {
	return "UpdateSoftwareReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSoftwareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSoftwareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSoftwareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSoftwareReqValidationError{}

// Validate checks the field values on UpdateSoftwareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSoftwareResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSoftwareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSoftwareRespMultiError, or nil if none found.
func (m *UpdateSoftwareResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSoftwareResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateSoftwareRespMultiError(errors)
	}

	return nil
}

// UpdateSoftwareRespMultiError is an error wrapping multiple validation errors
// returned by UpdateSoftwareResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateSoftwareRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSoftwareRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSoftwareRespMultiError) AllErrors() []error { return m }

// UpdateSoftwareRespValidationError is the validation error returned by
// UpdateSoftwareResp.Validate if the designated constraints aren't met.
type UpdateSoftwareRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSoftwareRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSoftwareRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSoftwareRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSoftwareRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSoftwareRespValidationError) ErrorName() string {
	return "UpdateSoftwareRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSoftwareRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSoftwareResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSoftwareRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSoftwareRespValidationError{}

// Validate checks the field values on ListSoftwareReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSoftwareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSoftwareReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSoftwareReqMultiError, or nil if none found.
func (m *ListSoftwareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSoftwareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListSoftwareReqValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 10 {
		err := ListSoftwareReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for CountryId

	// no validation rules for Status

	// no validation rules for DeveloperId

	// no validation rules for CategoryCode

	if len(errors) > 0 {
		return ListSoftwareReqMultiError(errors)
	}

	return nil
}

// ListSoftwareReqMultiError is an error wrapping multiple validation errors
// returned by ListSoftwareReq.ValidateAll() if the designated constraints
// aren't met.
type ListSoftwareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSoftwareReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSoftwareReqMultiError) AllErrors() []error { return m }

// ListSoftwareReqValidationError is the validation error returned by
// ListSoftwareReq.Validate if the designated constraints aren't met.
type ListSoftwareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSoftwareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSoftwareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSoftwareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSoftwareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSoftwareReqValidationError) ErrorName() string { return "ListSoftwareReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSoftwareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSoftwareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSoftwareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSoftwareReqValidationError{}

// Validate checks the field values on ListSoftwareResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSoftwareResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSoftwareResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSoftwareRespMultiError, or nil if none found.
func (m *ListSoftwareResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSoftwareResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSoftwareRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSoftwareRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSoftwareRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListSoftwareRespMultiError(errors)
	}

	return nil
}

// ListSoftwareRespMultiError is an error wrapping multiple validation errors
// returned by ListSoftwareResp.ValidateAll() if the designated constraints
// aren't met.
type ListSoftwareRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSoftwareRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSoftwareRespMultiError) AllErrors() []error { return m }

// ListSoftwareRespValidationError is the validation error returned by
// ListSoftwareResp.Validate if the designated constraints aren't met.
type ListSoftwareRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSoftwareRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSoftwareRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSoftwareRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSoftwareRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSoftwareRespValidationError) ErrorName() string { return "ListSoftwareRespValidationError" }

// Error satisfies the builtin error interface
func (e ListSoftwareRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSoftwareResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSoftwareRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSoftwareRespValidationError{}

// Validate checks the field values on GetSoftwareByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSoftwareByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSoftwareByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSoftwareByIdReqMultiError, or nil if none found.
func (m *GetSoftwareByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSoftwareByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSoftwareByIdReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSoftwareByIdReqMultiError(errors)
	}

	return nil
}

// GetSoftwareByIdReqMultiError is an error wrapping multiple validation errors
// returned by GetSoftwareByIdReq.ValidateAll() if the designated constraints
// aren't met.
type GetSoftwareByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSoftwareByIdReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSoftwareByIdReqMultiError) AllErrors() []error { return m }

// GetSoftwareByIdReqValidationError is the validation error returned by
// GetSoftwareByIdReq.Validate if the designated constraints aren't met.
type GetSoftwareByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSoftwareByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSoftwareByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSoftwareByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSoftwareByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSoftwareByIdReqValidationError) ErrorName() string {
	return "GetSoftwareByIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSoftwareByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSoftwareByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSoftwareByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSoftwareByIdReqValidationError{}
