// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/isms/v1/dashboard.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dashboard_GetOverviewStats_FullMethodName            = "/isms.v1.Dashboard/GetOverviewStats"
	Dashboard_GetSoftwareByIndustryStats_FullMethodName  = "/isms.v1.Dashboard/GetSoftwareByIndustryStats"
	Dashboard_GetSoftwareByCountryStats_FullMethodName   = "/isms.v1.Dashboard/GetSoftwareByCountryStats"
	Dashboard_GetSoftwareByDeveloperStats_FullMethodName = "/isms.v1.Dashboard/GetSoftwareByDeveloperStats"
	Dashboard_GetSoftwareTrendStats_FullMethodName       = "/isms.v1.Dashboard/GetSoftwareTrendStats"
	Dashboard_GetSoftwareByStatusStats_FullMethodName    = "/isms.v1.Dashboard/GetSoftwareByStatusStats"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 大屏统计数据服务
type DashboardClient interface {
	// 获取概览统计数据
	GetOverviewStats(ctx context.Context, in *GetOverviewStatsReq, opts ...grpc.CallOption) (*GetOverviewStatsResp, error)
	// 获取软件按行业分布统计
	GetSoftwareByIndustryStats(ctx context.Context, in *GetSoftwareByIndustryStatsReq, opts ...grpc.CallOption) (*GetSoftwareByIndustryStatsResp, error)
	// 获取软件按国家分布统计
	GetSoftwareByCountryStats(ctx context.Context, in *GetSoftwareByCountryStatsReq, opts ...grpc.CallOption) (*GetSoftwareByCountryStatsResp, error)
	// 获取软件按开发商分布统计
	GetSoftwareByDeveloperStats(ctx context.Context, in *GetSoftwareByDeveloperStatsReq, opts ...grpc.CallOption) (*GetSoftwareByDeveloperStatsResp, error)
	// 获取软件按年份发布趋势统计
	GetSoftwareTrendStats(ctx context.Context, in *GetSoftwareTrendStatsReq, opts ...grpc.CallOption) (*GetSoftwareTrendStatsResp, error)
	// 获取软件按状态分布统计
	GetSoftwareByStatusStats(ctx context.Context, in *GetSoftwareByStatusStatsReq, opts ...grpc.CallOption) (*GetSoftwareByStatusStatsResp, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) GetOverviewStats(ctx context.Context, in *GetOverviewStatsReq, opts ...grpc.CallOption) (*GetOverviewStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOverviewStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetOverviewStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSoftwareByIndustryStats(ctx context.Context, in *GetSoftwareByIndustryStatsReq, opts ...grpc.CallOption) (*GetSoftwareByIndustryStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoftwareByIndustryStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetSoftwareByIndustryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSoftwareByCountryStats(ctx context.Context, in *GetSoftwareByCountryStatsReq, opts ...grpc.CallOption) (*GetSoftwareByCountryStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoftwareByCountryStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetSoftwareByCountryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSoftwareByDeveloperStats(ctx context.Context, in *GetSoftwareByDeveloperStatsReq, opts ...grpc.CallOption) (*GetSoftwareByDeveloperStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoftwareByDeveloperStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetSoftwareByDeveloperStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSoftwareTrendStats(ctx context.Context, in *GetSoftwareTrendStatsReq, opts ...grpc.CallOption) (*GetSoftwareTrendStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoftwareTrendStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetSoftwareTrendStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GetSoftwareByStatusStats(ctx context.Context, in *GetSoftwareByStatusStatsReq, opts ...grpc.CallOption) (*GetSoftwareByStatusStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoftwareByStatusStatsResp)
	err := c.cc.Invoke(ctx, Dashboard_GetSoftwareByStatusStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility.
//
// 大屏统计数据服务
type DashboardServer interface {
	// 获取概览统计数据
	GetOverviewStats(context.Context, *GetOverviewStatsReq) (*GetOverviewStatsResp, error)
	// 获取软件按行业分布统计
	GetSoftwareByIndustryStats(context.Context, *GetSoftwareByIndustryStatsReq) (*GetSoftwareByIndustryStatsResp, error)
	// 获取软件按国家分布统计
	GetSoftwareByCountryStats(context.Context, *GetSoftwareByCountryStatsReq) (*GetSoftwareByCountryStatsResp, error)
	// 获取软件按开发商分布统计
	GetSoftwareByDeveloperStats(context.Context, *GetSoftwareByDeveloperStatsReq) (*GetSoftwareByDeveloperStatsResp, error)
	// 获取软件按年份发布趋势统计
	GetSoftwareTrendStats(context.Context, *GetSoftwareTrendStatsReq) (*GetSoftwareTrendStatsResp, error)
	// 获取软件按状态分布统计
	GetSoftwareByStatusStats(context.Context, *GetSoftwareByStatusStatsReq) (*GetSoftwareByStatusStatsResp, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDashboardServer struct{}

func (UnimplementedDashboardServer) GetOverviewStats(context.Context, *GetOverviewStatsReq) (*GetOverviewStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverviewStats not implemented")
}
func (UnimplementedDashboardServer) GetSoftwareByIndustryStats(context.Context, *GetSoftwareByIndustryStatsReq) (*GetSoftwareByIndustryStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareByIndustryStats not implemented")
}
func (UnimplementedDashboardServer) GetSoftwareByCountryStats(context.Context, *GetSoftwareByCountryStatsReq) (*GetSoftwareByCountryStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareByCountryStats not implemented")
}
func (UnimplementedDashboardServer) GetSoftwareByDeveloperStats(context.Context, *GetSoftwareByDeveloperStatsReq) (*GetSoftwareByDeveloperStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareByDeveloperStats not implemented")
}
func (UnimplementedDashboardServer) GetSoftwareTrendStats(context.Context, *GetSoftwareTrendStatsReq) (*GetSoftwareTrendStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareTrendStats not implemented")
}
func (UnimplementedDashboardServer) GetSoftwareByStatusStats(context.Context, *GetSoftwareByStatusStatsReq) (*GetSoftwareByStatusStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareByStatusStats not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}
func (UnimplementedDashboardServer) testEmbeddedByValue()                   {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	// If the following call pancis, it indicates UnimplementedDashboardServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_GetOverviewStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverviewStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetOverviewStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetOverviewStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetOverviewStats(ctx, req.(*GetOverviewStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSoftwareByIndustryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByIndustryStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSoftwareByIndustryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSoftwareByIndustryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSoftwareByIndustryStats(ctx, req.(*GetSoftwareByIndustryStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSoftwareByCountryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByCountryStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSoftwareByCountryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSoftwareByCountryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSoftwareByCountryStats(ctx, req.(*GetSoftwareByCountryStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSoftwareByDeveloperStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByDeveloperStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSoftwareByDeveloperStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSoftwareByDeveloperStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSoftwareByDeveloperStats(ctx, req.(*GetSoftwareByDeveloperStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSoftwareTrendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareTrendStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSoftwareTrendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSoftwareTrendStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSoftwareTrendStats(ctx, req.(*GetSoftwareTrendStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GetSoftwareByStatusStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByStatusStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GetSoftwareByStatusStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GetSoftwareByStatusStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GetSoftwareByStatusStats(ctx, req.(*GetSoftwareByStatusStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOverviewStats",
			Handler:    _Dashboard_GetOverviewStats_Handler,
		},
		{
			MethodName: "GetSoftwareByIndustryStats",
			Handler:    _Dashboard_GetSoftwareByIndustryStats_Handler,
		},
		{
			MethodName: "GetSoftwareByCountryStats",
			Handler:    _Dashboard_GetSoftwareByCountryStats_Handler,
		},
		{
			MethodName: "GetSoftwareByDeveloperStats",
			Handler:    _Dashboard_GetSoftwareByDeveloperStats_Handler,
		},
		{
			MethodName: "GetSoftwareTrendStats",
			Handler:    _Dashboard_GetSoftwareTrendStats_Handler,
		},
		{
			MethodName: "GetSoftwareByStatusStats",
			Handler:    _Dashboard_GetSoftwareByStatusStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/isms/v1/dashboard.proto",
}
