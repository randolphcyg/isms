// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsDeveloper(db *gorm.DB, opts ...gen.DOOption) ismsDeveloper {
	_ismsDeveloper := ismsDeveloper{}

	_ismsDeveloper.ismsDeveloperDo.UseDB(db, opts...)
	_ismsDeveloper.ismsDeveloperDo.UseModel(&model.IsmsDeveloper{})

	tableName := _ismsDeveloper.ismsDeveloperDo.TableName()
	_ismsDeveloper.ALL = field.NewAsterisk(tableName)
	_ismsDeveloper.ID = field.NewInt32(tableName, "id")
	_ismsDeveloper.NameZh = field.NewString(tableName, "name_zh")
	_ismsDeveloper.NameEn = field.NewString(tableName, "name_en")
	_ismsDeveloper.CountryID = field.NewInt32(tableName, "country_id")
	_ismsDeveloper.Website = field.NewString(tableName, "website")
	_ismsDeveloper.Description = field.NewString(tableName, "description")
	_ismsDeveloper.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsDeveloper.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ismsDeveloper.fillFieldMap()

	return _ismsDeveloper
}

// ismsDeveloper 软件开发商表（国家关联通过代码逻辑维护，非数据库外键）
type ismsDeveloper struct {
	ismsDeveloperDo ismsDeveloperDo

	ALL         field.Asterisk
	ID          field.Int32  // 自增ID
	NameZh      field.String // 开发商中文名称（如：施耐德电气）
	NameEn      field.String // 开发商英文名称（如：Schneider Electric）
	CountryID   field.Int32  // 所属国家ID（关联isms_country.id，通过代码逻辑维护关联）
	Website     field.String // 官方网站URL
	Description field.String // 开发商简介
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i ismsDeveloper) Table(newTableName string) *ismsDeveloper {
	i.ismsDeveloperDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsDeveloper) As(alias string) *ismsDeveloper {
	i.ismsDeveloperDo.DO = *(i.ismsDeveloperDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsDeveloper) updateTableName(table string) *ismsDeveloper {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.NameZh = field.NewString(table, "name_zh")
	i.NameEn = field.NewString(table, "name_en")
	i.CountryID = field.NewInt32(table, "country_id")
	i.Website = field.NewString(table, "website")
	i.Description = field.NewString(table, "description")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *ismsDeveloper) WithContext(ctx context.Context) IIsmsDeveloperDo {
	return i.ismsDeveloperDo.WithContext(ctx)
}

func (i ismsDeveloper) TableName() string { return i.ismsDeveloperDo.TableName() }

func (i ismsDeveloper) Alias() string { return i.ismsDeveloperDo.Alias() }

func (i ismsDeveloper) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsDeveloperDo.Columns(cols...)
}

func (i *ismsDeveloper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsDeveloper) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name_zh"] = i.NameZh
	i.fieldMap["name_en"] = i.NameEn
	i.fieldMap["country_id"] = i.CountryID
	i.fieldMap["website"] = i.Website
	i.fieldMap["description"] = i.Description
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i ismsDeveloper) clone(db *gorm.DB) ismsDeveloper {
	i.ismsDeveloperDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsDeveloper) replaceDB(db *gorm.DB) ismsDeveloper {
	i.ismsDeveloperDo.ReplaceDB(db)
	return i
}

type ismsDeveloperDo struct{ gen.DO }

type IIsmsDeveloperDo interface {
	gen.SubQuery
	Debug() IIsmsDeveloperDo
	WithContext(ctx context.Context) IIsmsDeveloperDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsDeveloperDo
	WriteDB() IIsmsDeveloperDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsDeveloperDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsDeveloperDo
	Not(conds ...gen.Condition) IIsmsDeveloperDo
	Or(conds ...gen.Condition) IIsmsDeveloperDo
	Select(conds ...field.Expr) IIsmsDeveloperDo
	Where(conds ...gen.Condition) IIsmsDeveloperDo
	Order(conds ...field.Expr) IIsmsDeveloperDo
	Distinct(cols ...field.Expr) IIsmsDeveloperDo
	Omit(cols ...field.Expr) IIsmsDeveloperDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo
	Group(cols ...field.Expr) IIsmsDeveloperDo
	Having(conds ...gen.Condition) IIsmsDeveloperDo
	Limit(limit int) IIsmsDeveloperDo
	Offset(offset int) IIsmsDeveloperDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsDeveloperDo
	Unscoped() IIsmsDeveloperDo
	Create(values ...*model.IsmsDeveloper) error
	CreateInBatches(values []*model.IsmsDeveloper, batchSize int) error
	Save(values ...*model.IsmsDeveloper) error
	First() (*model.IsmsDeveloper, error)
	Take() (*model.IsmsDeveloper, error)
	Last() (*model.IsmsDeveloper, error)
	Find() ([]*model.IsmsDeveloper, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsDeveloper, err error)
	FindInBatches(result *[]*model.IsmsDeveloper, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsDeveloper) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsDeveloperDo
	Assign(attrs ...field.AssignExpr) IIsmsDeveloperDo
	Joins(fields ...field.RelationField) IIsmsDeveloperDo
	Preload(fields ...field.RelationField) IIsmsDeveloperDo
	FirstOrInit() (*model.IsmsDeveloper, error)
	FirstOrCreate() (*model.IsmsDeveloper, error)
	FindByPage(offset int, limit int) (result []*model.IsmsDeveloper, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsDeveloperDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsDeveloperDo) Debug() IIsmsDeveloperDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsDeveloperDo) WithContext(ctx context.Context) IIsmsDeveloperDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsDeveloperDo) ReadDB() IIsmsDeveloperDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsDeveloperDo) WriteDB() IIsmsDeveloperDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsDeveloperDo) Session(config *gorm.Session) IIsmsDeveloperDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsDeveloperDo) Clauses(conds ...clause.Expression) IIsmsDeveloperDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsDeveloperDo) Returning(value interface{}, columns ...string) IIsmsDeveloperDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsDeveloperDo) Not(conds ...gen.Condition) IIsmsDeveloperDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsDeveloperDo) Or(conds ...gen.Condition) IIsmsDeveloperDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsDeveloperDo) Select(conds ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsDeveloperDo) Where(conds ...gen.Condition) IIsmsDeveloperDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsDeveloperDo) Order(conds ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsDeveloperDo) Distinct(cols ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsDeveloperDo) Omit(cols ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsDeveloperDo) Join(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsDeveloperDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsDeveloperDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsDeveloperDo) Group(cols ...field.Expr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsDeveloperDo) Having(conds ...gen.Condition) IIsmsDeveloperDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsDeveloperDo) Limit(limit int) IIsmsDeveloperDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsDeveloperDo) Offset(offset int) IIsmsDeveloperDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsDeveloperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsDeveloperDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsDeveloperDo) Unscoped() IIsmsDeveloperDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsDeveloperDo) Create(values ...*model.IsmsDeveloper) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsDeveloperDo) CreateInBatches(values []*model.IsmsDeveloper, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsDeveloperDo) Save(values ...*model.IsmsDeveloper) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsDeveloperDo) First() (*model.IsmsDeveloper, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsDeveloper), nil
	}
}

func (i ismsDeveloperDo) Take() (*model.IsmsDeveloper, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsDeveloper), nil
	}
}

func (i ismsDeveloperDo) Last() (*model.IsmsDeveloper, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsDeveloper), nil
	}
}

func (i ismsDeveloperDo) Find() ([]*model.IsmsDeveloper, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsDeveloper), err
}

func (i ismsDeveloperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsDeveloper, err error) {
	buf := make([]*model.IsmsDeveloper, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsDeveloperDo) FindInBatches(result *[]*model.IsmsDeveloper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsDeveloperDo) Attrs(attrs ...field.AssignExpr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsDeveloperDo) Assign(attrs ...field.AssignExpr) IIsmsDeveloperDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsDeveloperDo) Joins(fields ...field.RelationField) IIsmsDeveloperDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsDeveloperDo) Preload(fields ...field.RelationField) IIsmsDeveloperDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsDeveloperDo) FirstOrInit() (*model.IsmsDeveloper, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsDeveloper), nil
	}
}

func (i ismsDeveloperDo) FirstOrCreate() (*model.IsmsDeveloper, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsDeveloper), nil
	}
}

func (i ismsDeveloperDo) FindByPage(offset int, limit int) (result []*model.IsmsDeveloper, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsDeveloperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsDeveloperDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsDeveloperDo) Delete(models ...*model.IsmsDeveloper) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsDeveloperDo) withDO(do gen.Dao) *ismsDeveloperDo {
	i.DO = *do.(*gen.DO)
	return i
}
