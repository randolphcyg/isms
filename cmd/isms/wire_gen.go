// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"isms/internal/biz"
	"isms/internal/conf"
	"isms/internal/data"
	"isms/internal/data/repo"
	"isms/internal/server"
	"isms/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	db := dataData.Db
	industryRepo := repo.NewIndustryRepo(db, logger)
	industryUsecase := biz.NewIndustryUsecase(industryRepo, logger)
	industryService := service.NewIndustryService(industryUsecase, logger)
	developerRepo := repo.NewDeveloperRepo(db, logger)
	developerUsecase := biz.NewDeveloperUsecase(developerRepo, logger)
	developerService := service.NewDeveloperService(developerUsecase, logger)
	softwareRepo := repo.NewSoftwareRepo(db, logger)
	countryRepo := repo.NewCountryRepo(db, logger)
	softwareUsecase := biz.NewSoftwareUsecase(softwareRepo, countryRepo, developerRepo, industryRepo, logger)
	softwareService := service.NewSoftwareService(softwareUsecase, industryUsecase, logger)
	countryUsecase := biz.NewCountryUsecase(countryRepo, logger)
	countryService := service.NewCountryService(countryUsecase, logger)
	osRepo := repo.NewOSRepo(db, logger)
	osUsecase := biz.NewOSUsecase(osRepo, logger)
	osService := service.NewOSService(osUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, industryService, developerService, softwareService, countryService, osService, logger)
	httpServer := server.NewHTTPServer(confServer, confData, industryService, developerService, softwareService, countryService, osService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
