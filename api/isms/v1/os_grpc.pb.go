// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: isms/v1/os.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OS_CreateOS_FullMethodName = "/isms.v1.OS/CreateOS"
	OS_UpdateOS_FullMethodName = "/isms.v1.OS/UpdateOS"
	OS_DeleteOS_FullMethodName = "/isms.v1.OS/DeleteOS"
	OS_GetOS_FullMethodName    = "/isms.v1.OS/GetOS"
	OS_ListOS_FullMethodName   = "/isms.v1.OS/ListOS"
)

// OSClient is the client API for OS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 操作系统服务
type OSClient interface {
	// 创建操作系统
	CreateOS(ctx context.Context, in *CreateOSReq, opts ...grpc.CallOption) (*OSResp, error)
	// 更新操作系统
	UpdateOS(ctx context.Context, in *UpdateOSReq, opts ...grpc.CallOption) (*OSResp, error)
	// 删除操作系统
	DeleteOS(ctx context.Context, in *DeleteOSReq, opts ...grpc.CallOption) (*DeleteOSResp, error)
	// 查询单个操作系统
	GetOS(ctx context.Context, in *GetOSReq, opts ...grpc.CallOption) (*OSResp, error)
	// 分页查询操作系统列表
	ListOS(ctx context.Context, in *ListOSReq, opts ...grpc.CallOption) (*ListOSResp, error)
}

type oSClient struct {
	cc grpc.ClientConnInterface
}

func NewOSClient(cc grpc.ClientConnInterface) OSClient {
	return &oSClient{cc}
}

func (c *oSClient) CreateOS(ctx context.Context, in *CreateOSReq, opts ...grpc.CallOption) (*OSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OSResp)
	err := c.cc.Invoke(ctx, OS_CreateOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) UpdateOS(ctx context.Context, in *UpdateOSReq, opts ...grpc.CallOption) (*OSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OSResp)
	err := c.cc.Invoke(ctx, OS_UpdateOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) DeleteOS(ctx context.Context, in *DeleteOSReq, opts ...grpc.CallOption) (*DeleteOSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOSResp)
	err := c.cc.Invoke(ctx, OS_DeleteOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) GetOS(ctx context.Context, in *GetOSReq, opts ...grpc.CallOption) (*OSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OSResp)
	err := c.cc.Invoke(ctx, OS_GetOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) ListOS(ctx context.Context, in *ListOSReq, opts ...grpc.CallOption) (*ListOSResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOSResp)
	err := c.cc.Invoke(ctx, OS_ListOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSServer is the server API for OS service.
// All implementations must embed UnimplementedOSServer
// for forward compatibility.
//
// 操作系统服务
type OSServer interface {
	// 创建操作系统
	CreateOS(context.Context, *CreateOSReq) (*OSResp, error)
	// 更新操作系统
	UpdateOS(context.Context, *UpdateOSReq) (*OSResp, error)
	// 删除操作系统
	DeleteOS(context.Context, *DeleteOSReq) (*DeleteOSResp, error)
	// 查询单个操作系统
	GetOS(context.Context, *GetOSReq) (*OSResp, error)
	// 分页查询操作系统列表
	ListOS(context.Context, *ListOSReq) (*ListOSResp, error)
	mustEmbedUnimplementedOSServer()
}

// UnimplementedOSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOSServer struct{}

func (UnimplementedOSServer) CreateOS(context.Context, *CreateOSReq) (*OSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOS not implemented")
}
func (UnimplementedOSServer) UpdateOS(context.Context, *UpdateOSReq) (*OSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOS not implemented")
}
func (UnimplementedOSServer) DeleteOS(context.Context, *DeleteOSReq) (*DeleteOSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOS not implemented")
}
func (UnimplementedOSServer) GetOS(context.Context, *GetOSReq) (*OSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOS not implemented")
}
func (UnimplementedOSServer) ListOS(context.Context, *ListOSReq) (*ListOSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOS not implemented")
}
func (UnimplementedOSServer) mustEmbedUnimplementedOSServer() {}
func (UnimplementedOSServer) testEmbeddedByValue()            {}

// UnsafeOSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSServer will
// result in compilation errors.
type UnsafeOSServer interface {
	mustEmbedUnimplementedOSServer()
}

func RegisterOSServer(s grpc.ServiceRegistrar, srv OSServer) {
	// If the following call pancis, it indicates UnimplementedOSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OS_ServiceDesc, srv)
}

func _OS_CreateOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).CreateOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_CreateOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).CreateOS(ctx, req.(*CreateOSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_UpdateOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).UpdateOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_UpdateOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).UpdateOS(ctx, req.(*UpdateOSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_DeleteOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).DeleteOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_DeleteOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).DeleteOS(ctx, req.(*DeleteOSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_GetOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).GetOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_GetOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).GetOS(ctx, req.(*GetOSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_ListOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).ListOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_ListOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).ListOS(ctx, req.(*ListOSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OS_ServiceDesc is the grpc.ServiceDesc for OS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.OS",
	HandlerType: (*OSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOS",
			Handler:    _OS_CreateOS_Handler,
		},
		{
			MethodName: "UpdateOS",
			Handler:    _OS_UpdateOS_Handler,
		},
		{
			MethodName: "DeleteOS",
			Handler:    _OS_DeleteOS_Handler,
		},
		{
			MethodName: "GetOS",
			Handler:    _OS_GetOS_Handler,
		},
		{
			MethodName: "ListOS",
			Handler:    _OS_ListOS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isms/v1/os.proto",
}
