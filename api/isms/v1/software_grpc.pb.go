// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: isms/v1/software.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Software_CreateSoftware_FullMethodName  = "/isms.v1.Software/CreateSoftware"
	Software_UpdateSoftware_FullMethodName  = "/isms.v1.Software/UpdateSoftware"
	Software_ListSoftware_FullMethodName    = "/isms.v1.Software/ListSoftware"
	Software_GetSoftwareById_FullMethodName = "/isms.v1.Software/GetSoftwareById"
)

// SoftwareClient is the client API for Software service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 工业软件
type SoftwareClient interface {
	// 创建工业软件记录
	CreateSoftware(ctx context.Context, in *CreateSoftwareReq, opts ...grpc.CallOption) (*CreateSoftwareResp, error)
	// 更新工业软件记录
	UpdateSoftware(ctx context.Context, in *UpdateSoftwareReq, opts ...grpc.CallOption) (*UpdateSoftwareResp, error)
	// 分页查询工业软件记录
	ListSoftware(ctx context.Context, in *ListSoftwareReq, opts ...grpc.CallOption) (*ListSoftwareResp, error)
	// 根据ID查询单个软件（修正：参数传递方式）
	GetSoftwareById(ctx context.Context, in *GetSoftwareByIdReq, opts ...grpc.CallOption) (*IsmsSoftware, error)
}

type softwareClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftwareClient(cc grpc.ClientConnInterface) SoftwareClient {
	return &softwareClient{cc}
}

func (c *softwareClient) CreateSoftware(ctx context.Context, in *CreateSoftwareReq, opts ...grpc.CallOption) (*CreateSoftwareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSoftwareResp)
	err := c.cc.Invoke(ctx, Software_CreateSoftware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareClient) UpdateSoftware(ctx context.Context, in *UpdateSoftwareReq, opts ...grpc.CallOption) (*UpdateSoftwareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSoftwareResp)
	err := c.cc.Invoke(ctx, Software_UpdateSoftware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareClient) ListSoftware(ctx context.Context, in *ListSoftwareReq, opts ...grpc.CallOption) (*ListSoftwareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSoftwareResp)
	err := c.cc.Invoke(ctx, Software_ListSoftware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareClient) GetSoftwareById(ctx context.Context, in *GetSoftwareByIdReq, opts ...grpc.CallOption) (*IsmsSoftware, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsmsSoftware)
	err := c.cc.Invoke(ctx, Software_GetSoftwareById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareServer is the server API for Software service.
// All implementations must embed UnimplementedSoftwareServer
// for forward compatibility.
//
// 工业软件
type SoftwareServer interface {
	// 创建工业软件记录
	CreateSoftware(context.Context, *CreateSoftwareReq) (*CreateSoftwareResp, error)
	// 更新工业软件记录
	UpdateSoftware(context.Context, *UpdateSoftwareReq) (*UpdateSoftwareResp, error)
	// 分页查询工业软件记录
	ListSoftware(context.Context, *ListSoftwareReq) (*ListSoftwareResp, error)
	// 根据ID查询单个软件（修正：参数传递方式）
	GetSoftwareById(context.Context, *GetSoftwareByIdReq) (*IsmsSoftware, error)
	mustEmbedUnimplementedSoftwareServer()
}

// UnimplementedSoftwareServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoftwareServer struct{}

func (UnimplementedSoftwareServer) CreateSoftware(context.Context, *CreateSoftwareReq) (*CreateSoftwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSoftware not implemented")
}
func (UnimplementedSoftwareServer) UpdateSoftware(context.Context, *UpdateSoftwareReq) (*UpdateSoftwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoftware not implemented")
}
func (UnimplementedSoftwareServer) ListSoftware(context.Context, *ListSoftwareReq) (*ListSoftwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSoftware not implemented")
}
func (UnimplementedSoftwareServer) GetSoftwareById(context.Context, *GetSoftwareByIdReq) (*IsmsSoftware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareById not implemented")
}
func (UnimplementedSoftwareServer) mustEmbedUnimplementedSoftwareServer() {}
func (UnimplementedSoftwareServer) testEmbeddedByValue()                  {}

// UnsafeSoftwareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftwareServer will
// result in compilation errors.
type UnsafeSoftwareServer interface {
	mustEmbedUnimplementedSoftwareServer()
}

func RegisterSoftwareServer(s grpc.ServiceRegistrar, srv SoftwareServer) {
	// If the following call pancis, it indicates UnimplementedSoftwareServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Software_ServiceDesc, srv)
}

func _Software_CreateSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSoftwareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServer).CreateSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Software_CreateSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServer).CreateSoftware(ctx, req.(*CreateSoftwareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Software_UpdateSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSoftwareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServer).UpdateSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Software_UpdateSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServer).UpdateSoftware(ctx, req.(*UpdateSoftwareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Software_ListSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSoftwareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServer).ListSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Software_ListSoftware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServer).ListSoftware(ctx, req.(*ListSoftwareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Software_GetSoftwareById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoftwareByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServer).GetSoftwareById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Software_GetSoftwareById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServer).GetSoftwareById(ctx, req.(*GetSoftwareByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Software_ServiceDesc is the grpc.ServiceDesc for Software service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Software_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.Software",
	HandlerType: (*SoftwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSoftware",
			Handler:    _Software_CreateSoftware_Handler,
		},
		{
			MethodName: "UpdateSoftware",
			Handler:    _Software_UpdateSoftware_Handler,
		},
		{
			MethodName: "ListSoftware",
			Handler:    _Software_ListSoftware_Handler,
		},
		{
			MethodName: "GetSoftwareById",
			Handler:    _Software_GetSoftwareById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isms/v1/software.proto",
}
