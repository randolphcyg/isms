// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/isms/v1/developer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDeveloperReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeveloperReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeveloperReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeveloperReqMultiError, or nil if none found.
func (m *CreateDeveloperReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeveloperReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNameZh()); l < 1 || l > 200 {
		err := CreateDeveloperReqValidationError{
			field:  "NameZh",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameEn()); l < 1 || l > 200 {
		err := CreateDeveloperReqValidationError{
			field:  "NameEn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCountryId() <= 0 {
		err := CreateDeveloperReqValidationError{
			field:  "CountryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWebsite()) > 500 {
		err := CreateDeveloperReqValidationError{
			field:  "Website",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateDeveloperReqMultiError(errors)
	}

	return nil
}

// CreateDeveloperReqMultiError is an error wrapping multiple validation errors
// returned by CreateDeveloperReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDeveloperReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeveloperReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeveloperReqMultiError) AllErrors() []error { return m }

// CreateDeveloperReqValidationError is the validation error returned by
// CreateDeveloperReq.Validate if the designated constraints aren't met.
type CreateDeveloperReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeveloperReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeveloperReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeveloperReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeveloperReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeveloperReqValidationError) ErrorName() string {
	return "CreateDeveloperReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeveloperReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeveloperReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeveloperReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeveloperReqValidationError{}

// Validate checks the field values on UpdateDeveloperReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeveloperReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeveloperReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeveloperReqMultiError, or nil if none found.
func (m *UpdateDeveloperReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeveloperReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDeveloperReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameZh()); l < 1 || l > 200 {
		err := UpdateDeveloperReqValidationError{
			field:  "NameZh",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameEn()); l < 1 || l > 200 {
		err := UpdateDeveloperReqValidationError{
			field:  "NameEn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCountryId() <= 0 {
		err := UpdateDeveloperReqValidationError{
			field:  "CountryId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWebsite()) > 500 {
		err := UpdateDeveloperReqValidationError{
			field:  "Website",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateDeveloperReqMultiError(errors)
	}

	return nil
}

// UpdateDeveloperReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDeveloperReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDeveloperReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeveloperReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeveloperReqMultiError) AllErrors() []error { return m }

// UpdateDeveloperReqValidationError is the validation error returned by
// UpdateDeveloperReq.Validate if the designated constraints aren't met.
type UpdateDeveloperReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeveloperReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeveloperReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeveloperReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeveloperReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeveloperReqValidationError) ErrorName() string {
	return "UpdateDeveloperReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeveloperReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeveloperReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeveloperReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeveloperReqValidationError{}

// Validate checks the field values on GetDeveloperReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeveloperReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeveloperReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeveloperReqMultiError, or nil if none found.
func (m *GetDeveloperReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeveloperReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDeveloperReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeveloperReqMultiError(errors)
	}

	return nil
}

// GetDeveloperReqMultiError is an error wrapping multiple validation errors
// returned by GetDeveloperReq.ValidateAll() if the designated constraints
// aren't met.
type GetDeveloperReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeveloperReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeveloperReqMultiError) AllErrors() []error { return m }

// GetDeveloperReqValidationError is the validation error returned by
// GetDeveloperReq.Validate if the designated constraints aren't met.
type GetDeveloperReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeveloperReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeveloperReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeveloperReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeveloperReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeveloperReqValidationError) ErrorName() string { return "GetDeveloperReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDeveloperReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeveloperReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeveloperReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeveloperReqValidationError{}

// Validate checks the field values on ListDevelopersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDevelopersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevelopersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevelopersReqMultiError, or nil if none found.
func (m *ListDevelopersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevelopersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListDevelopersReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := ListDevelopersReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CountryId

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListDevelopersReqMultiError(errors)
	}

	return nil
}

// ListDevelopersReqMultiError is an error wrapping multiple validation errors
// returned by ListDevelopersReq.ValidateAll() if the designated constraints
// aren't met.
type ListDevelopersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevelopersReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevelopersReqMultiError) AllErrors() []error { return m }

// ListDevelopersReqValidationError is the validation error returned by
// ListDevelopersReq.Validate if the designated constraints aren't met.
type ListDevelopersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevelopersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevelopersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevelopersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevelopersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevelopersReqValidationError) ErrorName() string {
	return "ListDevelopersReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevelopersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevelopersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevelopersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevelopersReqValidationError{}

// Validate checks the field values on DeveloperResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeveloperResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeveloperResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeveloperRespMultiError, or
// nil if none found.
func (m *DeveloperResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeveloperResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NameZh

	// no validation rules for NameEn

	// no validation rules for CountryId

	// no validation rules for CountryName

	// no validation rules for Website

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return DeveloperRespMultiError(errors)
	}

	return nil
}

// DeveloperRespMultiError is an error wrapping multiple validation errors
// returned by DeveloperResp.ValidateAll() if the designated constraints
// aren't met.
type DeveloperRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeveloperRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeveloperRespMultiError) AllErrors() []error { return m }

// DeveloperRespValidationError is the validation error returned by
// DeveloperResp.Validate if the designated constraints aren't met.
type DeveloperRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeveloperRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeveloperRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeveloperRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeveloperRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeveloperRespValidationError) ErrorName() string { return "DeveloperRespValidationError" }

// Error satisfies the builtin error interface
func (e DeveloperRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeveloperResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeveloperRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeveloperRespValidationError{}

// Validate checks the field values on ListDevelopersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevelopersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevelopersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevelopersRespMultiError, or nil if none found.
func (m *ListDevelopersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevelopersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevelopersRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevelopersRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevelopersRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListDevelopersRespMultiError(errors)
	}

	return nil
}

// ListDevelopersRespMultiError is an error wrapping multiple validation errors
// returned by ListDevelopersResp.ValidateAll() if the designated constraints
// aren't met.
type ListDevelopersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevelopersRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevelopersRespMultiError) AllErrors() []error { return m }

// ListDevelopersRespValidationError is the validation error returned by
// ListDevelopersResp.Validate if the designated constraints aren't met.
type ListDevelopersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevelopersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevelopersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevelopersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevelopersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevelopersRespValidationError) ErrorName() string {
	return "ListDevelopersRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevelopersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevelopersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevelopersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevelopersRespValidationError{}
