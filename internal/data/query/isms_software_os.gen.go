// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsSoftwareO(db *gorm.DB, opts ...gen.DOOption) ismsSoftwareO {
	_ismsSoftwareO := ismsSoftwareO{}

	_ismsSoftwareO.ismsSoftwareODo.UseDB(db, opts...)
	_ismsSoftwareO.ismsSoftwareODo.UseModel(&model.IsmsSoftwareO{})

	tableName := _ismsSoftwareO.ismsSoftwareODo.TableName()
	_ismsSoftwareO.ALL = field.NewAsterisk(tableName)
	_ismsSoftwareO.SoftwareID = field.NewInt32(tableName, "software_id")
	_ismsSoftwareO.OsID = field.NewInt32(tableName, "os_id")
	_ismsSoftwareO.Note = field.NewString(tableName, "note")
	_ismsSoftwareO.CreatedAt = field.NewTime(tableName, "created_at")

	_ismsSoftwareO.fillFieldMap()

	return _ismsSoftwareO
}

// ismsSoftwareO 软件与操作系统多对多关联表
type ismsSoftwareO struct {
	ismsSoftwareODo ismsSoftwareODo

	ALL        field.Asterisk
	SoftwareID field.Int32  // 软件ID（关联isms_software.id）
	OsID       field.Int32  // 操作系统ID（关联isms_operating_system.id）
	Note       field.String // 备注（如仅支持专业版）
	CreatedAt  field.Time   // 关联创建时间

	fieldMap map[string]field.Expr
}

func (i ismsSoftwareO) Table(newTableName string) *ismsSoftwareO {
	i.ismsSoftwareODo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsSoftwareO) As(alias string) *ismsSoftwareO {
	i.ismsSoftwareODo.DO = *(i.ismsSoftwareODo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsSoftwareO) updateTableName(table string) *ismsSoftwareO {
	i.ALL = field.NewAsterisk(table)
	i.SoftwareID = field.NewInt32(table, "software_id")
	i.OsID = field.NewInt32(table, "os_id")
	i.Note = field.NewString(table, "note")
	i.CreatedAt = field.NewTime(table, "created_at")

	i.fillFieldMap()

	return i
}

func (i *ismsSoftwareO) WithContext(ctx context.Context) IIsmsSoftwareODo {
	return i.ismsSoftwareODo.WithContext(ctx)
}

func (i ismsSoftwareO) TableName() string { return i.ismsSoftwareODo.TableName() }

func (i ismsSoftwareO) Alias() string { return i.ismsSoftwareODo.Alias() }

func (i ismsSoftwareO) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsSoftwareODo.Columns(cols...)
}

func (i *ismsSoftwareO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsSoftwareO) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["software_id"] = i.SoftwareID
	i.fieldMap["os_id"] = i.OsID
	i.fieldMap["note"] = i.Note
	i.fieldMap["created_at"] = i.CreatedAt
}

func (i ismsSoftwareO) clone(db *gorm.DB) ismsSoftwareO {
	i.ismsSoftwareODo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsSoftwareO) replaceDB(db *gorm.DB) ismsSoftwareO {
	i.ismsSoftwareODo.ReplaceDB(db)
	return i
}

type ismsSoftwareODo struct{ gen.DO }

type IIsmsSoftwareODo interface {
	gen.SubQuery
	Debug() IIsmsSoftwareODo
	WithContext(ctx context.Context) IIsmsSoftwareODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsSoftwareODo
	WriteDB() IIsmsSoftwareODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsSoftwareODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsSoftwareODo
	Not(conds ...gen.Condition) IIsmsSoftwareODo
	Or(conds ...gen.Condition) IIsmsSoftwareODo
	Select(conds ...field.Expr) IIsmsSoftwareODo
	Where(conds ...gen.Condition) IIsmsSoftwareODo
	Order(conds ...field.Expr) IIsmsSoftwareODo
	Distinct(cols ...field.Expr) IIsmsSoftwareODo
	Omit(cols ...field.Expr) IIsmsSoftwareODo
	Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo
	Group(cols ...field.Expr) IIsmsSoftwareODo
	Having(conds ...gen.Condition) IIsmsSoftwareODo
	Limit(limit int) IIsmsSoftwareODo
	Offset(offset int) IIsmsSoftwareODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareODo
	Unscoped() IIsmsSoftwareODo
	Create(values ...*model.IsmsSoftwareO) error
	CreateInBatches(values []*model.IsmsSoftwareO, batchSize int) error
	Save(values ...*model.IsmsSoftwareO) error
	First() (*model.IsmsSoftwareO, error)
	Take() (*model.IsmsSoftwareO, error)
	Last() (*model.IsmsSoftwareO, error)
	Find() ([]*model.IsmsSoftwareO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareO, err error)
	FindInBatches(result *[]*model.IsmsSoftwareO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsSoftwareO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsSoftwareODo
	Assign(attrs ...field.AssignExpr) IIsmsSoftwareODo
	Joins(fields ...field.RelationField) IIsmsSoftwareODo
	Preload(fields ...field.RelationField) IIsmsSoftwareODo
	FirstOrInit() (*model.IsmsSoftwareO, error)
	FirstOrCreate() (*model.IsmsSoftwareO, error)
	FindByPage(offset int, limit int) (result []*model.IsmsSoftwareO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsSoftwareODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsSoftwareODo) Debug() IIsmsSoftwareODo {
	return i.withDO(i.DO.Debug())
}

func (i ismsSoftwareODo) WithContext(ctx context.Context) IIsmsSoftwareODo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsSoftwareODo) ReadDB() IIsmsSoftwareODo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsSoftwareODo) WriteDB() IIsmsSoftwareODo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsSoftwareODo) Session(config *gorm.Session) IIsmsSoftwareODo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsSoftwareODo) Clauses(conds ...clause.Expression) IIsmsSoftwareODo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsSoftwareODo) Returning(value interface{}, columns ...string) IIsmsSoftwareODo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsSoftwareODo) Not(conds ...gen.Condition) IIsmsSoftwareODo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsSoftwareODo) Or(conds ...gen.Condition) IIsmsSoftwareODo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsSoftwareODo) Select(conds ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsSoftwareODo) Where(conds ...gen.Condition) IIsmsSoftwareODo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsSoftwareODo) Order(conds ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsSoftwareODo) Distinct(cols ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsSoftwareODo) Omit(cols ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsSoftwareODo) Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsSoftwareODo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsSoftwareODo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsSoftwareODo) Group(cols ...field.Expr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsSoftwareODo) Having(conds ...gen.Condition) IIsmsSoftwareODo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsSoftwareODo) Limit(limit int) IIsmsSoftwareODo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsSoftwareODo) Offset(offset int) IIsmsSoftwareODo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsSoftwareODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareODo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsSoftwareODo) Unscoped() IIsmsSoftwareODo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsSoftwareODo) Create(values ...*model.IsmsSoftwareO) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsSoftwareODo) CreateInBatches(values []*model.IsmsSoftwareO, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsSoftwareODo) Save(values ...*model.IsmsSoftwareO) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsSoftwareODo) First() (*model.IsmsSoftwareO, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareO), nil
	}
}

func (i ismsSoftwareODo) Take() (*model.IsmsSoftwareO, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareO), nil
	}
}

func (i ismsSoftwareODo) Last() (*model.IsmsSoftwareO, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareO), nil
	}
}

func (i ismsSoftwareODo) Find() ([]*model.IsmsSoftwareO, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsSoftwareO), err
}

func (i ismsSoftwareODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareO, err error) {
	buf := make([]*model.IsmsSoftwareO, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsSoftwareODo) FindInBatches(result *[]*model.IsmsSoftwareO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsSoftwareODo) Attrs(attrs ...field.AssignExpr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsSoftwareODo) Assign(attrs ...field.AssignExpr) IIsmsSoftwareODo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsSoftwareODo) Joins(fields ...field.RelationField) IIsmsSoftwareODo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsSoftwareODo) Preload(fields ...field.RelationField) IIsmsSoftwareODo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsSoftwareODo) FirstOrInit() (*model.IsmsSoftwareO, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareO), nil
	}
}

func (i ismsSoftwareODo) FirstOrCreate() (*model.IsmsSoftwareO, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareO), nil
	}
}

func (i ismsSoftwareODo) FindByPage(offset int, limit int) (result []*model.IsmsSoftwareO, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsSoftwareODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsSoftwareODo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsSoftwareODo) Delete(models ...*model.IsmsSoftwareO) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsSoftwareODo) withDO(do gen.Dao) *ismsSoftwareODo {
	i.DO = *do.(*gen.DO)
	return i
}
