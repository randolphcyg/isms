// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: isms/v1/developer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDeveloperCreateDeveloper = "/isms.v1.Developer/CreateDeveloper"
const OperationDeveloperGetDeveloper = "/isms.v1.Developer/GetDeveloper"
const OperationDeveloperListDevelopers = "/isms.v1.Developer/ListDevelopers"

type DeveloperHTTPServer interface {
	// CreateDeveloper 创建开发商
	CreateDeveloper(context.Context, *CreateDeveloperReq) (*DeveloperResp, error)
	// GetDeveloper 查询单个开发商（按ID）
	GetDeveloper(context.Context, *GetDeveloperReq) (*DeveloperResp, error)
	// ListDevelopers 分页查询开发商列表
	ListDevelopers(context.Context, *ListDevelopersReq) (*ListDevelopersResp, error)
}

func RegisterDeveloperHTTPServer(s *http.Server, srv DeveloperHTTPServer) {
	r := s.Route("/")
	r.POST("/industry/v1/developers", _Developer_CreateDeveloper0_HTTP_Handler(srv))
	r.GET("/industry/v1/developers/{id}", _Developer_GetDeveloper0_HTTP_Handler(srv))
	r.GET("/industry/v1/developers", _Developer_ListDevelopers0_HTTP_Handler(srv))
}

func _Developer_CreateDeveloper0_HTTP_Handler(srv DeveloperHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDeveloperReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeveloperCreateDeveloper)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDeveloper(ctx, req.(*CreateDeveloperReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeveloperResp)
		return ctx.Result(200, reply)
	}
}

func _Developer_GetDeveloper0_HTTP_Handler(srv DeveloperHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeveloperReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeveloperGetDeveloper)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeveloper(ctx, req.(*GetDeveloperReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeveloperResp)
		return ctx.Result(200, reply)
	}
}

func _Developer_ListDevelopers0_HTTP_Handler(srv DeveloperHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDevelopersReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeveloperListDevelopers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDevelopers(ctx, req.(*ListDevelopersReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDevelopersResp)
		return ctx.Result(200, reply)
	}
}

type DeveloperHTTPClient interface {
	CreateDeveloper(ctx context.Context, req *CreateDeveloperReq, opts ...http.CallOption) (rsp *DeveloperResp, err error)
	GetDeveloper(ctx context.Context, req *GetDeveloperReq, opts ...http.CallOption) (rsp *DeveloperResp, err error)
	ListDevelopers(ctx context.Context, req *ListDevelopersReq, opts ...http.CallOption) (rsp *ListDevelopersResp, err error)
}

type DeveloperHTTPClientImpl struct {
	cc *http.Client
}

func NewDeveloperHTTPClient(client *http.Client) DeveloperHTTPClient {
	return &DeveloperHTTPClientImpl{client}
}

func (c *DeveloperHTTPClientImpl) CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, opts ...http.CallOption) (*DeveloperResp, error) {
	var out DeveloperResp
	pattern := "/industry/v1/developers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeveloperCreateDeveloper))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeveloperHTTPClientImpl) GetDeveloper(ctx context.Context, in *GetDeveloperReq, opts ...http.CallOption) (*DeveloperResp, error) {
	var out DeveloperResp
	pattern := "/industry/v1/developers/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeveloperGetDeveloper))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeveloperHTTPClientImpl) ListDevelopers(ctx context.Context, in *ListDevelopersReq, opts ...http.CallOption) (*ListDevelopersResp, error) {
	var out ListDevelopersResp
	pattern := "/industry/v1/developers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeveloperListDevelopers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
