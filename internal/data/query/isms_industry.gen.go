// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsIndustry(db *gorm.DB, opts ...gen.DOOption) ismsIndustry {
	_ismsIndustry := ismsIndustry{}

	_ismsIndustry.ismsIndustryDo.UseDB(db, opts...)
	_ismsIndustry.ismsIndustryDo.UseModel(&model.IsmsIndustry{})

	tableName := _ismsIndustry.ismsIndustryDo.TableName()
	_ismsIndustry.ALL = field.NewAsterisk(tableName)
	_ismsIndustry.ID = field.NewInt32(tableName, "id")
	_ismsIndustry.CategoryCode = field.NewString(tableName, "category_code")
	_ismsIndustry.CategoryName = field.NewString(tableName, "category_name")
	_ismsIndustry.SubcategoryCode = field.NewString(tableName, "subcategory_code")
	_ismsIndustry.SubcategoryName = field.NewString(tableName, "subcategory_name")
	_ismsIndustry.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsIndustry.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ismsIndustry.fillFieldMap()

	return _ismsIndustry
}

// ismsIndustry 第二产业行业分类表
type ismsIndustry struct {
	ismsIndustryDo ismsIndustryDo

	ALL             field.Asterisk
	ID              field.Int32  // 自增ID
	CategoryCode    field.String // 大类代码(B/C/D/E等)
	CategoryName    field.String // 大类名称(采矿业/制造业等)
	SubcategoryCode field.String // 小类代码(06/07/13等)
	SubcategoryName field.String // 小类名称(煤炭开采和洗选业等)
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i ismsIndustry) Table(newTableName string) *ismsIndustry {
	i.ismsIndustryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsIndustry) As(alias string) *ismsIndustry {
	i.ismsIndustryDo.DO = *(i.ismsIndustryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsIndustry) updateTableName(table string) *ismsIndustry {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.CategoryCode = field.NewString(table, "category_code")
	i.CategoryName = field.NewString(table, "category_name")
	i.SubcategoryCode = field.NewString(table, "subcategory_code")
	i.SubcategoryName = field.NewString(table, "subcategory_name")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *ismsIndustry) WithContext(ctx context.Context) IIsmsIndustryDo {
	return i.ismsIndustryDo.WithContext(ctx)
}

func (i ismsIndustry) TableName() string { return i.ismsIndustryDo.TableName() }

func (i ismsIndustry) Alias() string { return i.ismsIndustryDo.Alias() }

func (i ismsIndustry) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsIndustryDo.Columns(cols...)
}

func (i *ismsIndustry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsIndustry) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["category_code"] = i.CategoryCode
	i.fieldMap["category_name"] = i.CategoryName
	i.fieldMap["subcategory_code"] = i.SubcategoryCode
	i.fieldMap["subcategory_name"] = i.SubcategoryName
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i ismsIndustry) clone(db *gorm.DB) ismsIndustry {
	i.ismsIndustryDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsIndustry) replaceDB(db *gorm.DB) ismsIndustry {
	i.ismsIndustryDo.ReplaceDB(db)
	return i
}

type ismsIndustryDo struct{ gen.DO }

type IIsmsIndustryDo interface {
	gen.SubQuery
	Debug() IIsmsIndustryDo
	WithContext(ctx context.Context) IIsmsIndustryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsIndustryDo
	WriteDB() IIsmsIndustryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsIndustryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsIndustryDo
	Not(conds ...gen.Condition) IIsmsIndustryDo
	Or(conds ...gen.Condition) IIsmsIndustryDo
	Select(conds ...field.Expr) IIsmsIndustryDo
	Where(conds ...gen.Condition) IIsmsIndustryDo
	Order(conds ...field.Expr) IIsmsIndustryDo
	Distinct(cols ...field.Expr) IIsmsIndustryDo
	Omit(cols ...field.Expr) IIsmsIndustryDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo
	Group(cols ...field.Expr) IIsmsIndustryDo
	Having(conds ...gen.Condition) IIsmsIndustryDo
	Limit(limit int) IIsmsIndustryDo
	Offset(offset int) IIsmsIndustryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsIndustryDo
	Unscoped() IIsmsIndustryDo
	Create(values ...*model.IsmsIndustry) error
	CreateInBatches(values []*model.IsmsIndustry, batchSize int) error
	Save(values ...*model.IsmsIndustry) error
	First() (*model.IsmsIndustry, error)
	Take() (*model.IsmsIndustry, error)
	Last() (*model.IsmsIndustry, error)
	Find() ([]*model.IsmsIndustry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsIndustry, err error)
	FindInBatches(result *[]*model.IsmsIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsIndustry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsIndustryDo
	Assign(attrs ...field.AssignExpr) IIsmsIndustryDo
	Joins(fields ...field.RelationField) IIsmsIndustryDo
	Preload(fields ...field.RelationField) IIsmsIndustryDo
	FirstOrInit() (*model.IsmsIndustry, error)
	FirstOrCreate() (*model.IsmsIndustry, error)
	FindByPage(offset int, limit int) (result []*model.IsmsIndustry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsIndustryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsIndustryDo) Debug() IIsmsIndustryDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsIndustryDo) WithContext(ctx context.Context) IIsmsIndustryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsIndustryDo) ReadDB() IIsmsIndustryDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsIndustryDo) WriteDB() IIsmsIndustryDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsIndustryDo) Session(config *gorm.Session) IIsmsIndustryDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsIndustryDo) Clauses(conds ...clause.Expression) IIsmsIndustryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsIndustryDo) Returning(value interface{}, columns ...string) IIsmsIndustryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsIndustryDo) Not(conds ...gen.Condition) IIsmsIndustryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsIndustryDo) Or(conds ...gen.Condition) IIsmsIndustryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsIndustryDo) Select(conds ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsIndustryDo) Where(conds ...gen.Condition) IIsmsIndustryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsIndustryDo) Order(conds ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsIndustryDo) Distinct(cols ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsIndustryDo) Omit(cols ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsIndustryDo) Join(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsIndustryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsIndustryDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsIndustryDo) Group(cols ...field.Expr) IIsmsIndustryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsIndustryDo) Having(conds ...gen.Condition) IIsmsIndustryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsIndustryDo) Limit(limit int) IIsmsIndustryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsIndustryDo) Offset(offset int) IIsmsIndustryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsIndustryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsIndustryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsIndustryDo) Unscoped() IIsmsIndustryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsIndustryDo) Create(values ...*model.IsmsIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsIndustryDo) CreateInBatches(values []*model.IsmsIndustry, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsIndustryDo) Save(values ...*model.IsmsIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsIndustryDo) First() (*model.IsmsIndustry, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsIndustry), nil
	}
}

func (i ismsIndustryDo) Take() (*model.IsmsIndustry, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsIndustry), nil
	}
}

func (i ismsIndustryDo) Last() (*model.IsmsIndustry, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsIndustry), nil
	}
}

func (i ismsIndustryDo) Find() ([]*model.IsmsIndustry, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsIndustry), err
}

func (i ismsIndustryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsIndustry, err error) {
	buf := make([]*model.IsmsIndustry, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsIndustryDo) FindInBatches(result *[]*model.IsmsIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsIndustryDo) Attrs(attrs ...field.AssignExpr) IIsmsIndustryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsIndustryDo) Assign(attrs ...field.AssignExpr) IIsmsIndustryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsIndustryDo) Joins(fields ...field.RelationField) IIsmsIndustryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsIndustryDo) Preload(fields ...field.RelationField) IIsmsIndustryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsIndustryDo) FirstOrInit() (*model.IsmsIndustry, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsIndustry), nil
	}
}

func (i ismsIndustryDo) FirstOrCreate() (*model.IsmsIndustry, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsIndustry), nil
	}
}

func (i ismsIndustryDo) FindByPage(offset int, limit int) (result []*model.IsmsIndustry, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsIndustryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsIndustryDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsIndustryDo) Delete(models ...*model.IsmsIndustry) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsIndustryDo) withDO(do gen.Dao) *ismsIndustryDo {
	i.DO = *do.(*gen.DO)
	return i
}
