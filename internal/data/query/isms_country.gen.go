// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsCountry(db *gorm.DB, opts ...gen.DOOption) ismsCountry {
	_ismsCountry := ismsCountry{}

	_ismsCountry.ismsCountryDo.UseDB(db, opts...)
	_ismsCountry.ismsCountryDo.UseModel(&model.IsmsCountry{})

	tableName := _ismsCountry.ismsCountryDo.TableName()
	_ismsCountry.ALL = field.NewAsterisk(tableName)
	_ismsCountry.ID = field.NewInt32(tableName, "id")
	_ismsCountry.NameZh = field.NewString(tableName, "name_zh")
	_ismsCountry.NameEn = field.NewString(tableName, "name_en")
	_ismsCountry.IsoCode = field.NewString(tableName, "iso_code")
	_ismsCountry.Continent = field.NewString(tableName, "continent")
	_ismsCountry.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsCountry.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ismsCountry.fillFieldMap()

	return _ismsCountry
}

// ismsCountry 国家/地区表
type ismsCountry struct {
	ismsCountryDo ismsCountryDo

	ALL       field.Asterisk
	ID        field.Int32  // 自增ID
	NameZh    field.String // 国家中文名称（如：中国）
	NameEn    field.String // 国家英文名称（如：China）
	IsoCode   field.String // ISO 3166-1 alpha-2两位编码（如：CN）
	Continent field.String // 所属大洲（如：亚洲、欧洲）
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i ismsCountry) Table(newTableName string) *ismsCountry {
	i.ismsCountryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsCountry) As(alias string) *ismsCountry {
	i.ismsCountryDo.DO = *(i.ismsCountryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsCountry) updateTableName(table string) *ismsCountry {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.NameZh = field.NewString(table, "name_zh")
	i.NameEn = field.NewString(table, "name_en")
	i.IsoCode = field.NewString(table, "iso_code")
	i.Continent = field.NewString(table, "continent")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *ismsCountry) WithContext(ctx context.Context) IIsmsCountryDo {
	return i.ismsCountryDo.WithContext(ctx)
}

func (i ismsCountry) TableName() string { return i.ismsCountryDo.TableName() }

func (i ismsCountry) Alias() string { return i.ismsCountryDo.Alias() }

func (i ismsCountry) Columns(cols ...field.Expr) gen.Columns { return i.ismsCountryDo.Columns(cols...) }

func (i *ismsCountry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsCountry) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name_zh"] = i.NameZh
	i.fieldMap["name_en"] = i.NameEn
	i.fieldMap["iso_code"] = i.IsoCode
	i.fieldMap["continent"] = i.Continent
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i ismsCountry) clone(db *gorm.DB) ismsCountry {
	i.ismsCountryDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsCountry) replaceDB(db *gorm.DB) ismsCountry {
	i.ismsCountryDo.ReplaceDB(db)
	return i
}

type ismsCountryDo struct{ gen.DO }

type IIsmsCountryDo interface {
	gen.SubQuery
	Debug() IIsmsCountryDo
	WithContext(ctx context.Context) IIsmsCountryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsCountryDo
	WriteDB() IIsmsCountryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsCountryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsCountryDo
	Not(conds ...gen.Condition) IIsmsCountryDo
	Or(conds ...gen.Condition) IIsmsCountryDo
	Select(conds ...field.Expr) IIsmsCountryDo
	Where(conds ...gen.Condition) IIsmsCountryDo
	Order(conds ...field.Expr) IIsmsCountryDo
	Distinct(cols ...field.Expr) IIsmsCountryDo
	Omit(cols ...field.Expr) IIsmsCountryDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsCountryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsCountryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsCountryDo
	Group(cols ...field.Expr) IIsmsCountryDo
	Having(conds ...gen.Condition) IIsmsCountryDo
	Limit(limit int) IIsmsCountryDo
	Offset(offset int) IIsmsCountryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsCountryDo
	Unscoped() IIsmsCountryDo
	Create(values ...*model.IsmsCountry) error
	CreateInBatches(values []*model.IsmsCountry, batchSize int) error
	Save(values ...*model.IsmsCountry) error
	First() (*model.IsmsCountry, error)
	Take() (*model.IsmsCountry, error)
	Last() (*model.IsmsCountry, error)
	Find() ([]*model.IsmsCountry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsCountry, err error)
	FindInBatches(result *[]*model.IsmsCountry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsCountry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsCountryDo
	Assign(attrs ...field.AssignExpr) IIsmsCountryDo
	Joins(fields ...field.RelationField) IIsmsCountryDo
	Preload(fields ...field.RelationField) IIsmsCountryDo
	FirstOrInit() (*model.IsmsCountry, error)
	FirstOrCreate() (*model.IsmsCountry, error)
	FindByPage(offset int, limit int) (result []*model.IsmsCountry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsCountryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsCountryDo) Debug() IIsmsCountryDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsCountryDo) WithContext(ctx context.Context) IIsmsCountryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsCountryDo) ReadDB() IIsmsCountryDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsCountryDo) WriteDB() IIsmsCountryDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsCountryDo) Session(config *gorm.Session) IIsmsCountryDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsCountryDo) Clauses(conds ...clause.Expression) IIsmsCountryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsCountryDo) Returning(value interface{}, columns ...string) IIsmsCountryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsCountryDo) Not(conds ...gen.Condition) IIsmsCountryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsCountryDo) Or(conds ...gen.Condition) IIsmsCountryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsCountryDo) Select(conds ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsCountryDo) Where(conds ...gen.Condition) IIsmsCountryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsCountryDo) Order(conds ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsCountryDo) Distinct(cols ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsCountryDo) Omit(cols ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsCountryDo) Join(table schema.Tabler, on ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsCountryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsCountryDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsCountryDo) Group(cols ...field.Expr) IIsmsCountryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsCountryDo) Having(conds ...gen.Condition) IIsmsCountryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsCountryDo) Limit(limit int) IIsmsCountryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsCountryDo) Offset(offset int) IIsmsCountryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsCountryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsCountryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsCountryDo) Unscoped() IIsmsCountryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsCountryDo) Create(values ...*model.IsmsCountry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsCountryDo) CreateInBatches(values []*model.IsmsCountry, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsCountryDo) Save(values ...*model.IsmsCountry) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsCountryDo) First() (*model.IsmsCountry, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsCountry), nil
	}
}

func (i ismsCountryDo) Take() (*model.IsmsCountry, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsCountry), nil
	}
}

func (i ismsCountryDo) Last() (*model.IsmsCountry, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsCountry), nil
	}
}

func (i ismsCountryDo) Find() ([]*model.IsmsCountry, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsCountry), err
}

func (i ismsCountryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsCountry, err error) {
	buf := make([]*model.IsmsCountry, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsCountryDo) FindInBatches(result *[]*model.IsmsCountry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsCountryDo) Attrs(attrs ...field.AssignExpr) IIsmsCountryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsCountryDo) Assign(attrs ...field.AssignExpr) IIsmsCountryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsCountryDo) Joins(fields ...field.RelationField) IIsmsCountryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsCountryDo) Preload(fields ...field.RelationField) IIsmsCountryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsCountryDo) FirstOrInit() (*model.IsmsCountry, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsCountry), nil
	}
}

func (i ismsCountryDo) FirstOrCreate() (*model.IsmsCountry, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsCountry), nil
	}
}

func (i ismsCountryDo) FindByPage(offset int, limit int) (result []*model.IsmsCountry, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsCountryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsCountryDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsCountryDo) Delete(models ...*model.IsmsCountry) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsCountryDo) withDO(do gen.Dao) *ismsCountryDo {
	i.DO = *do.(*gen.DO)
	return i
}
