// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: isms/v1/developer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Developer_CreateDeveloper_FullMethodName = "/isms.v1.Developer/CreateDeveloper"
	Developer_GetDeveloper_FullMethodName    = "/isms.v1.Developer/GetDeveloper"
	Developer_ListDevelopers_FullMethodName  = "/isms.v1.Developer/ListDevelopers"
)

// DeveloperClient is the client API for Developer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 开发商服务
type DeveloperClient interface {
	// 创建开发商
	CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, opts ...grpc.CallOption) (*DeveloperResp, error)
	// 查询单个开发商（按ID）
	GetDeveloper(ctx context.Context, in *GetDeveloperReq, opts ...grpc.CallOption) (*DeveloperResp, error)
	// 分页查询开发商列表
	ListDevelopers(ctx context.Context, in *ListDevelopersReq, opts ...grpc.CallOption) (*ListDevelopersResp, error)
}

type developerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperClient(cc grpc.ClientConnInterface) DeveloperClient {
	return &developerClient{cc}
}

func (c *developerClient) CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, opts ...grpc.CallOption) (*DeveloperResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeveloperResp)
	err := c.cc.Invoke(ctx, Developer_CreateDeveloper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) GetDeveloper(ctx context.Context, in *GetDeveloperReq, opts ...grpc.CallOption) (*DeveloperResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeveloperResp)
	err := c.cc.Invoke(ctx, Developer_GetDeveloper_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerClient) ListDevelopers(ctx context.Context, in *ListDevelopersReq, opts ...grpc.CallOption) (*ListDevelopersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevelopersResp)
	err := c.cc.Invoke(ctx, Developer_ListDevelopers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperServer is the server API for Developer service.
// All implementations must embed UnimplementedDeveloperServer
// for forward compatibility.
//
// 开发商服务
type DeveloperServer interface {
	// 创建开发商
	CreateDeveloper(context.Context, *CreateDeveloperReq) (*DeveloperResp, error)
	// 查询单个开发商（按ID）
	GetDeveloper(context.Context, *GetDeveloperReq) (*DeveloperResp, error)
	// 分页查询开发商列表
	ListDevelopers(context.Context, *ListDevelopersReq) (*ListDevelopersResp, error)
	mustEmbedUnimplementedDeveloperServer()
}

// UnimplementedDeveloperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeveloperServer struct{}

func (UnimplementedDeveloperServer) CreateDeveloper(context.Context, *CreateDeveloperReq) (*DeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeveloper not implemented")
}
func (UnimplementedDeveloperServer) GetDeveloper(context.Context, *GetDeveloperReq) (*DeveloperResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloper not implemented")
}
func (UnimplementedDeveloperServer) ListDevelopers(context.Context, *ListDevelopersReq) (*ListDevelopersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevelopers not implemented")
}
func (UnimplementedDeveloperServer) mustEmbedUnimplementedDeveloperServer() {}
func (UnimplementedDeveloperServer) testEmbeddedByValue()                   {}

// UnsafeDeveloperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperServer will
// result in compilation errors.
type UnsafeDeveloperServer interface {
	mustEmbedUnimplementedDeveloperServer()
}

func RegisterDeveloperServer(s grpc.ServiceRegistrar, srv DeveloperServer) {
	// If the following call pancis, it indicates UnimplementedDeveloperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Developer_ServiceDesc, srv)
}

func _Developer_CreateDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).CreateDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_CreateDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).CreateDeveloper(ctx, req.(*CreateDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_GetDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).GetDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_GetDeveloper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).GetDeveloper(ctx, req.(*GetDeveloperReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developer_ListDevelopers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevelopersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperServer).ListDevelopers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developer_ListDevelopers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperServer).ListDevelopers(ctx, req.(*ListDevelopersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Developer_ServiceDesc is the grpc.ServiceDesc for Developer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Developer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.Developer",
	HandlerType: (*DeveloperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeveloper",
			Handler:    _Developer_CreateDeveloper_Handler,
		},
		{
			MethodName: "GetDeveloper",
			Handler:    _Developer_GetDeveloper_Handler,
		},
		{
			MethodName: "ListDevelopers",
			Handler:    _Developer_ListDevelopers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isms/v1/developer.proto",
}
