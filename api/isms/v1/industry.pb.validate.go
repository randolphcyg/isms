// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/isms/v1/industry.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSubcategoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubcategoriesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubcategoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubcategoriesReqMultiError, or nil if none found.
func (m *GetSubcategoriesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubcategoriesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCategoryCode()); l < 1 || l > 2 {
		err := GetSubcategoriesReqValidationError{
			field:  "CategoryCode",
			reason: "value length must be between 1 and 2 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSubcategoriesReqMultiError(errors)
	}

	return nil
}

// GetSubcategoriesReqMultiError is an error wrapping multiple validation
// errors returned by GetSubcategoriesReq.ValidateAll() if the designated
// constraints aren't met.
type GetSubcategoriesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubcategoriesReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubcategoriesReqMultiError) AllErrors() []error { return m }

// GetSubcategoriesReqValidationError is the validation error returned by
// GetSubcategoriesReq.Validate if the designated constraints aren't met.
type GetSubcategoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubcategoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubcategoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubcategoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubcategoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubcategoriesReqValidationError) ErrorName() string {
	return "GetSubcategoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubcategoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubcategoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubcategoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubcategoriesReqValidationError{}

// Validate checks the field values on GetSubcategoriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubcategoriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubcategoriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubcategoriesRespMultiError, or nil if none found.
func (m *GetSubcategoriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubcategoriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubcategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubcategoriesRespValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubcategoriesRespValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubcategoriesRespValidationError{
					field:  fmt.Sprintf("Subcategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubcategoriesRespMultiError(errors)
	}

	return nil
}

// GetSubcategoriesRespMultiError is an error wrapping multiple validation
// errors returned by GetSubcategoriesResp.ValidateAll() if the designated
// constraints aren't met.
type GetSubcategoriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubcategoriesRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubcategoriesRespMultiError) AllErrors() []error { return m }

// GetSubcategoriesRespValidationError is the validation error returned by
// GetSubcategoriesResp.Validate if the designated constraints aren't met.
type GetSubcategoriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubcategoriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubcategoriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubcategoriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubcategoriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubcategoriesRespValidationError) ErrorName() string {
	return "GetSubcategoriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubcategoriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubcategoriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubcategoriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubcategoriesRespValidationError{}

// Validate checks the field values on ListCategoriesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesReqMultiError, or nil if none found.
func (m *ListCategoriesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesReqMultiError(errors)
	}

	return nil
}

// ListCategoriesReqMultiError is an error wrapping multiple validation errors
// returned by ListCategoriesReq.ValidateAll() if the designated constraints
// aren't met.
type ListCategoriesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesReqMultiError) AllErrors() []error { return m }

// ListCategoriesReqValidationError is the validation error returned by
// ListCategoriesReq.Validate if the designated constraints aren't met.
type ListCategoriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesReqValidationError) ErrorName() string {
	return "ListCategoriesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesReqValidationError{}

// Validate checks the field values on ListCategoriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRespMultiError, or nil if none found.
func (m *ListCategoriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoriesRespValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoriesRespValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoriesRespValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCategoriesRespMultiError(errors)
	}

	return nil
}

// ListCategoriesRespMultiError is an error wrapping multiple validation errors
// returned by ListCategoriesResp.ValidateAll() if the designated constraints
// aren't met.
type ListCategoriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRespMultiError) AllErrors() []error { return m }

// ListCategoriesRespValidationError is the validation error returned by
// ListCategoriesResp.Validate if the designated constraints aren't met.
type ListCategoriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRespValidationError) ErrorName() string {
	return "ListCategoriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRespValidationError{}

// Validate checks the field values on IsmsIndustry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsmsIndustry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsmsIndustry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsmsIndustryMultiError, or
// nil if none found.
func (m *IsmsIndustry) ValidateAll() error {
	return m.validate(true)
}

func (m *IsmsIndustry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CategoryCode

	// no validation rules for CategoryName

	// no validation rules for SubcategoryCode

	// no validation rules for SubcategoryName

	if len(errors) > 0 {
		return IsmsIndustryMultiError(errors)
	}

	return nil
}

// IsmsIndustryMultiError is an error wrapping multiple validation errors
// returned by IsmsIndustry.ValidateAll() if the designated constraints aren't met.
type IsmsIndustryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsmsIndustryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsmsIndustryMultiError) AllErrors() []error { return m }

// IsmsIndustryValidationError is the validation error returned by
// IsmsIndustry.Validate if the designated constraints aren't met.
type IsmsIndustryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsmsIndustryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsmsIndustryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsmsIndustryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsmsIndustryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsmsIndustryValidationError) ErrorName() string { return "IsmsIndustryValidationError" }

// Error satisfies the builtin error interface
func (e IsmsIndustryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsmsIndustry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsmsIndustryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsmsIndustryValidationError{}

// Validate checks the field values on IndustryCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndustryCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndustryCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndustryCategoryMultiError, or nil if none found.
func (m *IndustryCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *IndustryCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryCode

	// no validation rules for CategoryName

	if len(errors) > 0 {
		return IndustryCategoryMultiError(errors)
	}

	return nil
}

// IndustryCategoryMultiError is an error wrapping multiple validation errors
// returned by IndustryCategory.ValidateAll() if the designated constraints
// aren't met.
type IndustryCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndustryCategoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndustryCategoryMultiError) AllErrors() []error { return m }

// IndustryCategoryValidationError is the validation error returned by
// IndustryCategory.Validate if the designated constraints aren't met.
type IndustryCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndustryCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndustryCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndustryCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndustryCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndustryCategoryValidationError) ErrorName() string { return "IndustryCategoryValidationError" }

// Error satisfies the builtin error interface
func (e IndustryCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndustryCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndustryCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndustryCategoryValidationError{}
