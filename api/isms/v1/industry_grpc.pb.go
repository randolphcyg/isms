// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: isms/v1/industry.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Industry_GetSubcategories_FullMethodName = "/isms.v1.Industry/GetSubcategories"
	Industry_ListCategories_FullMethodName   = "/isms.v1.Industry/ListCategories"
)

// IndustryClient is the client API for Industry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 行业分类服务
type IndustryClient interface {
	// 根据大类查询小类
	GetSubcategories(ctx context.Context, in *GetSubcategoriesReq, opts ...grpc.CallOption) (*GetSubcategoriesResp, error)
	// 查询所有大类
	ListCategories(ctx context.Context, in *ListCategoriesReq, opts ...grpc.CallOption) (*ListCategoriesResp, error)
}

type industryClient struct {
	cc grpc.ClientConnInterface
}

func NewIndustryClient(cc grpc.ClientConnInterface) IndustryClient {
	return &industryClient{cc}
}

func (c *industryClient) GetSubcategories(ctx context.Context, in *GetSubcategoriesReq, opts ...grpc.CallOption) (*GetSubcategoriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubcategoriesResp)
	err := c.cc.Invoke(ctx, Industry_GetSubcategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *industryClient) ListCategories(ctx context.Context, in *ListCategoriesReq, opts ...grpc.CallOption) (*ListCategoriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResp)
	err := c.cc.Invoke(ctx, Industry_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndustryServer is the server API for Industry service.
// All implementations must embed UnimplementedIndustryServer
// for forward compatibility.
//
// 行业分类服务
type IndustryServer interface {
	// 根据大类查询小类
	GetSubcategories(context.Context, *GetSubcategoriesReq) (*GetSubcategoriesResp, error)
	// 查询所有大类
	ListCategories(context.Context, *ListCategoriesReq) (*ListCategoriesResp, error)
	mustEmbedUnimplementedIndustryServer()
}

// UnimplementedIndustryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndustryServer struct{}

func (UnimplementedIndustryServer) GetSubcategories(context.Context, *GetSubcategoriesReq) (*GetSubcategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubcategories not implemented")
}
func (UnimplementedIndustryServer) ListCategories(context.Context, *ListCategoriesReq) (*ListCategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedIndustryServer) mustEmbedUnimplementedIndustryServer() {}
func (UnimplementedIndustryServer) testEmbeddedByValue()                  {}

// UnsafeIndustryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndustryServer will
// result in compilation errors.
type UnsafeIndustryServer interface {
	mustEmbedUnimplementedIndustryServer()
}

func RegisterIndustryServer(s grpc.ServiceRegistrar, srv IndustryServer) {
	// If the following call pancis, it indicates UnimplementedIndustryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Industry_ServiceDesc, srv)
}

func _Industry_GetSubcategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubcategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustryServer).GetSubcategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Industry_GetSubcategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustryServer).GetSubcategories(ctx, req.(*GetSubcategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Industry_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustryServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Industry_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustryServer).ListCategories(ctx, req.(*ListCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Industry_ServiceDesc is the grpc.ServiceDesc for Industry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Industry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.Industry",
	HandlerType: (*IndustryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubcategories",
			Handler:    _Industry_GetSubcategories_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _Industry_ListCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isms/v1/industry.proto",
}
