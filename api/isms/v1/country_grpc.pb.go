// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: isms/v1/country.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Country_CreateCountry_FullMethodName = "/isms.v1.Country/CreateCountry"
	Country_UpdateCountry_FullMethodName = "/isms.v1.Country/UpdateCountry"
	Country_DeleteCountry_FullMethodName = "/isms.v1.Country/DeleteCountry"
	Country_GetCountry_FullMethodName    = "/isms.v1.Country/GetCountry"
	Country_ListCountries_FullMethodName = "/isms.v1.Country/ListCountries"
)

// CountryClient is the client API for Country service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 国家
type CountryClient interface {
	// 创建国家
	CreateCountry(ctx context.Context, in *CreateCountryReq, opts ...grpc.CallOption) (*CountryResp, error)
	// 更新国家
	UpdateCountry(ctx context.Context, in *UpdateCountryReq, opts ...grpc.CallOption) (*CountryResp, error)
	// 删除国家
	DeleteCountry(ctx context.Context, in *DeleteCountryReq, opts ...grpc.CallOption) (*DeleteCountryResp, error)
	// 查询单个国家
	GetCountry(ctx context.Context, in *GetCountryReq, opts ...grpc.CallOption) (*CountryResp, error)
	// 分页查询国家列表
	ListCountries(ctx context.Context, in *ListCountriesReq, opts ...grpc.CallOption) (*ListCountriesResp, error)
}

type countryClient struct {
	cc grpc.ClientConnInterface
}

func NewCountryClient(cc grpc.ClientConnInterface) CountryClient {
	return &countryClient{cc}
}

func (c *countryClient) CreateCountry(ctx context.Context, in *CreateCountryReq, opts ...grpc.CallOption) (*CountryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResp)
	err := c.cc.Invoke(ctx, Country_CreateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) UpdateCountry(ctx context.Context, in *UpdateCountryReq, opts ...grpc.CallOption) (*CountryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResp)
	err := c.cc.Invoke(ctx, Country_UpdateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) DeleteCountry(ctx context.Context, in *DeleteCountryReq, opts ...grpc.CallOption) (*DeleteCountryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCountryResp)
	err := c.cc.Invoke(ctx, Country_DeleteCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) GetCountry(ctx context.Context, in *GetCountryReq, opts ...grpc.CallOption) (*CountryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResp)
	err := c.cc.Invoke(ctx, Country_GetCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countryClient) ListCountries(ctx context.Context, in *ListCountriesReq, opts ...grpc.CallOption) (*ListCountriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountriesResp)
	err := c.cc.Invoke(ctx, Country_ListCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountryServer is the server API for Country service.
// All implementations must embed UnimplementedCountryServer
// for forward compatibility.
//
// 国家
type CountryServer interface {
	// 创建国家
	CreateCountry(context.Context, *CreateCountryReq) (*CountryResp, error)
	// 更新国家
	UpdateCountry(context.Context, *UpdateCountryReq) (*CountryResp, error)
	// 删除国家
	DeleteCountry(context.Context, *DeleteCountryReq) (*DeleteCountryResp, error)
	// 查询单个国家
	GetCountry(context.Context, *GetCountryReq) (*CountryResp, error)
	// 分页查询国家列表
	ListCountries(context.Context, *ListCountriesReq) (*ListCountriesResp, error)
	mustEmbedUnimplementedCountryServer()
}

// UnimplementedCountryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCountryServer struct{}

func (UnimplementedCountryServer) CreateCountry(context.Context, *CreateCountryReq) (*CountryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedCountryServer) UpdateCountry(context.Context, *UpdateCountryReq) (*CountryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedCountryServer) DeleteCountry(context.Context, *DeleteCountryReq) (*DeleteCountryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedCountryServer) GetCountry(context.Context, *GetCountryReq) (*CountryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedCountryServer) ListCountries(context.Context, *ListCountriesReq) (*ListCountriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedCountryServer) mustEmbedUnimplementedCountryServer() {}
func (UnimplementedCountryServer) testEmbeddedByValue()                 {}

// UnsafeCountryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountryServer will
// result in compilation errors.
type UnsafeCountryServer interface {
	mustEmbedUnimplementedCountryServer()
}

func RegisterCountryServer(s grpc.ServiceRegistrar, srv CountryServer) {
	// If the following call pancis, it indicates UnimplementedCountryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Country_ServiceDesc, srv)
}

func _Country_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Country_CreateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).CreateCountry(ctx, req.(*CreateCountryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Country_UpdateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).UpdateCountry(ctx, req.(*UpdateCountryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Country_DeleteCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).DeleteCountry(ctx, req.(*DeleteCountryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Country_GetCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).GetCountry(ctx, req.(*GetCountryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Country_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountryServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Country_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountryServer).ListCountries(ctx, req.(*ListCountriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Country_ServiceDesc is the grpc.ServiceDesc for Country service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Country_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isms.v1.Country",
	HandlerType: (*CountryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountry",
			Handler:    _Country_CreateCountry_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _Country_UpdateCountry_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _Country_DeleteCountry_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _Country_GetCountry_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _Country_ListCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isms/v1/country.proto",
}
