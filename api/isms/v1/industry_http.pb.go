// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: isms/v1/industry.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationIndustryGetSubcategories = "/isms.v1.Industry/GetSubcategories"
const OperationIndustryListCategories = "/isms.v1.Industry/ListCategories"

type IndustryHTTPServer interface {
	// GetSubcategories 根据大类查询小类
	GetSubcategories(context.Context, *GetSubcategoriesReq) (*GetSubcategoriesResp, error)
	// ListCategories 查询所有大类
	ListCategories(context.Context, *ListCategoriesReq) (*ListCategoriesResp, error)
}

func RegisterIndustryHTTPServer(s *http.Server, srv IndustryHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/categories/{category_code}/subcategories", _Industry_GetSubcategories0_HTTP_Handler(srv))
	r.GET("/v1/categories", _Industry_ListCategories0_HTTP_Handler(srv))
}

func _Industry_GetSubcategories0_HTTP_Handler(srv IndustryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubcategoriesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndustryGetSubcategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubcategories(ctx, req.(*GetSubcategoriesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubcategoriesResp)
		return ctx.Result(200, reply)
	}
}

func _Industry_ListCategories0_HTTP_Handler(srv IndustryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoriesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndustryListCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategories(ctx, req.(*ListCategoriesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoriesResp)
		return ctx.Result(200, reply)
	}
}

type IndustryHTTPClient interface {
	GetSubcategories(ctx context.Context, req *GetSubcategoriesReq, opts ...http.CallOption) (rsp *GetSubcategoriesResp, err error)
	ListCategories(ctx context.Context, req *ListCategoriesReq, opts ...http.CallOption) (rsp *ListCategoriesResp, err error)
}

type IndustryHTTPClientImpl struct {
	cc *http.Client
}

func NewIndustryHTTPClient(client *http.Client) IndustryHTTPClient {
	return &IndustryHTTPClientImpl{client}
}

func (c *IndustryHTTPClientImpl) GetSubcategories(ctx context.Context, in *GetSubcategoriesReq, opts ...http.CallOption) (*GetSubcategoriesResp, error) {
	var out GetSubcategoriesResp
	pattern := "/v1/categories/{category_code}/subcategories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndustryGetSubcategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *IndustryHTTPClientImpl) ListCategories(ctx context.Context, in *ListCategoriesReq, opts ...http.CallOption) (*ListCategoriesResp, error) {
	var out ListCategoriesResp
	pattern := "/v1/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndustryListCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
