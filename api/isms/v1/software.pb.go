// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: isms/v1/software.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 工业软件主表数据结构
type IsmsSoftware struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 // 自增ID
	NameZh               string                 `protobuf:"bytes,2,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"`                                            // 软件中文名称
	NameEn               string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`                                            // 软件英文名称
	Version              string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                                                        // 版本号
	ReleaseYear          int32                  `protobuf:"varint,5,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"`                            // 发布年份（如2023）
	ReleaseMonth         int32                  `protobuf:"varint,6,opt,name=release_month,json=releaseMonth,proto3" json:"release_month,omitempty"`                         // 发布月份（1-12，0表示仅精确到年）
	ReleaseDay           int32                  `protobuf:"varint,7,opt,name=release_day,json=releaseDay,proto3" json:"release_day,omitempty"`                               // 发布日（1-31，0表示仅精确到年或月）
	DeveloperId          int32                  `protobuf:"varint,8,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`                            // 开发商ID
	CountryId            int32                  `protobuf:"varint,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`                                  // 产地国家ID
	CountryName          string                 `protobuf:"bytes,10,opt,name=countryName,proto3" json:"countryName,omitempty"`                                               // 国家名称
	DeveloperName        string                 `protobuf:"bytes,11,opt,name=developerName,proto3" json:"developerName,omitempty"`                                           // 生产商名称
	CpuReq               string                 `protobuf:"bytes,12,opt,name=cpu_req,json=cpuReq,proto3" json:"cpu_req,omitempty"`                                           // 处理器要求
	MemoryMinGb          float64                `protobuf:"fixed64,13,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`                        // 最小内存要求（GB）
	DiskMinGb            float64                `protobuf:"fixed64,14,opt,name=disk_min_gb,json=diskMinGb,proto3" json:"disk_min_gb,omitempty"`                              // 最小磁盘空间（GB）
	SysReqOther          string                 `protobuf:"bytes,15,opt,name=sys_req_other,json=sysReqOther,proto3" json:"sys_req_other,omitempty"`                          // 其他系统要求
	Description          string                 `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`                                               // 软件描述
	SizeBytes            int64                  `protobuf:"varint,17,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`                                 // 软件大小（KB）
	DeploymentMethod     string                 `protobuf:"bytes,18,opt,name=deployment_method,json=deploymentMethod,proto3" json:"deployment_method,omitempty"`             // 部署方式
	ComplianceInfo       string                 `protobuf:"bytes,19,opt,name=compliance_info,json=complianceInfo,proto3" json:"compliance_info,omitempty"`                   // 合规性信息
	SecurityInfo         string                 `protobuf:"bytes,20,opt,name=security_info,json=securityInfo,proto3" json:"security_info,omitempty"`                         // 安全信息
	IntellectualProperty string                 `protobuf:"bytes,21,opt,name=intellectual_property,json=intellectualProperty,proto3" json:"intellectual_property,omitempty"` // 知识产权信息
	Status               string                 `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`                                                         // 状态（active：有效；inactive：下架；testing：测试中；discontinued：停止维护）
	IndustryIds          []int32                `protobuf:"varint,23,rep,packed,name=industry_ids,json=industryIds,proto3" json:"industry_ids,omitempty"`                    // 适用行业小类ID列表
	OsIds                []int32                `protobuf:"varint,24,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"`                                      // 支持的操作系统ID列表
	CreatedAt            string                 `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                  // 创建时间
	UpdatedAt            string                 `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                  // 更新时间
	IndustryNames        []string               `protobuf:"bytes,27,rep,name=industry_names,json=industryNames,proto3" json:"industry_names,omitempty"`                      // 适用行业小类名称列表
	IndustryDetails      []*IsmsIndustry        `protobuf:"bytes,28,rep,name=industry_details,json=industryDetails,proto3" json:"industry_details,omitempty"`                // 适用行业详情
	BitWidths            []string               `protobuf:"bytes,29,rep,name=bit_widths,json=bitWidths,proto3" json:"bit_widths,omitempty"`                                  // 支持的位宽列表
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *IsmsSoftware) Reset() {
	*x = IsmsSoftware{}
	mi := &file_isms_v1_software_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsmsSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsmsSoftware) ProtoMessage() {}

func (x *IsmsSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsmsSoftware.ProtoReflect.Descriptor instead.
func (*IsmsSoftware) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{0}
}

func (x *IsmsSoftware) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IsmsSoftware) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *IsmsSoftware) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *IsmsSoftware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IsmsSoftware) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *IsmsSoftware) GetReleaseMonth() int32 {
	if x != nil {
		return x.ReleaseMonth
	}
	return 0
}

func (x *IsmsSoftware) GetReleaseDay() int32 {
	if x != nil {
		return x.ReleaseDay
	}
	return 0
}

func (x *IsmsSoftware) GetDeveloperId() int32 {
	if x != nil {
		return x.DeveloperId
	}
	return 0
}

func (x *IsmsSoftware) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *IsmsSoftware) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *IsmsSoftware) GetDeveloperName() string {
	if x != nil {
		return x.DeveloperName
	}
	return ""
}

func (x *IsmsSoftware) GetCpuReq() string {
	if x != nil {
		return x.CpuReq
	}
	return ""
}

func (x *IsmsSoftware) GetMemoryMinGb() float64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *IsmsSoftware) GetDiskMinGb() float64 {
	if x != nil {
		return x.DiskMinGb
	}
	return 0
}

func (x *IsmsSoftware) GetSysReqOther() string {
	if x != nil {
		return x.SysReqOther
	}
	return ""
}

func (x *IsmsSoftware) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IsmsSoftware) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *IsmsSoftware) GetDeploymentMethod() string {
	if x != nil {
		return x.DeploymentMethod
	}
	return ""
}

func (x *IsmsSoftware) GetComplianceInfo() string {
	if x != nil {
		return x.ComplianceInfo
	}
	return ""
}

func (x *IsmsSoftware) GetSecurityInfo() string {
	if x != nil {
		return x.SecurityInfo
	}
	return ""
}

func (x *IsmsSoftware) GetIntellectualProperty() string {
	if x != nil {
		return x.IntellectualProperty
	}
	return ""
}

func (x *IsmsSoftware) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IsmsSoftware) GetIndustryIds() []int32 {
	if x != nil {
		return x.IndustryIds
	}
	return nil
}

func (x *IsmsSoftware) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *IsmsSoftware) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IsmsSoftware) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *IsmsSoftware) GetIndustryNames() []string {
	if x != nil {
		return x.IndustryNames
	}
	return nil
}

func (x *IsmsSoftware) GetIndustryDetails() []*IsmsIndustry {
	if x != nil {
		return x.IndustryDetails
	}
	return nil
}

func (x *IsmsSoftware) GetBitWidths() []string {
	if x != nil {
		return x.BitWidths
	}
	return nil
}

// 创建软件请求
type CreateSoftwareReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	NameZh               string                 `protobuf:"bytes,1,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"`                                            // 软件中文名称
	NameEn               string                 `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`                                            // 软件英文名称
	Version              string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                                        // 版本号
	ReleaseYear          int32                  `protobuf:"varint,4,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"`                            // 发布年份（如2023）
	ReleaseMonth         int32                  `protobuf:"varint,5,opt,name=release_month,json=releaseMonth,proto3" json:"release_month,omitempty"`                         // 发布月份（1-12，0表示仅精确到年）
	ReleaseDay           int32                  `protobuf:"varint,6,opt,name=release_day,json=releaseDay,proto3" json:"release_day,omitempty"`                               // 发布日（1-31，0表示仅精确到年或月）
	DeveloperId          int32                  `protobuf:"varint,7,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`                            // 开发商ID
	CountryId            int32                  `protobuf:"varint,8,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`                                  // 产地国家ID
	CpuReq               string                 `protobuf:"bytes,9,opt,name=cpu_req,json=cpuReq,proto3" json:"cpu_req,omitempty"`                                            // 处理器要求
	MemoryMinGb          float64                `protobuf:"fixed64,10,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`                        // 最小内存要求（GB）
	DiskMinGb            float64                `protobuf:"fixed64,11,opt,name=disk_min_gb,json=diskMinGb,proto3" json:"disk_min_gb,omitempty"`                              // 最小磁盘空间（GB）
	SysReqOther          string                 `protobuf:"bytes,12,opt,name=sys_req_other,json=sysReqOther,proto3" json:"sys_req_other,omitempty"`                          // 其他系统要求
	Description          string                 `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`                                               // 软件描述
	SizeBytes            int64                  `protobuf:"varint,14,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`                                 // 软件大小（KB）
	DeploymentMethod     string                 `protobuf:"bytes,15,opt,name=deployment_method,json=deploymentMethod,proto3" json:"deployment_method,omitempty"`             // 部署方式
	ComplianceInfo       string                 `protobuf:"bytes,16,opt,name=compliance_info,json=complianceInfo,proto3" json:"compliance_info,omitempty"`                   // 合规性信息
	SecurityInfo         string                 `protobuf:"bytes,17,opt,name=security_info,json=securityInfo,proto3" json:"security_info,omitempty"`                         // 安全信息
	IntellectualProperty string                 `protobuf:"bytes,18,opt,name=intellectual_property,json=intellectualProperty,proto3" json:"intellectual_property,omitempty"` // 知识产权信息
	Status               string                 `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`                                                         // 状态（active：有效；inactive：下架；testing：测试中；discontinued：停止维护）
	IndustryIds          []int32                `protobuf:"varint,20,rep,packed,name=industry_ids,json=industryIds,proto3" json:"industry_ids,omitempty"`                    // 适用行业小类ID列表
	OsIds                []int32                `protobuf:"varint,21,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"`                                      // 支持的操作系统ID列表
	BitWidths            []string               `protobuf:"bytes,22,rep,name=bit_widths,json=bitWidths,proto3" json:"bit_widths,omitempty"`                                  // 支持的位宽列表
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateSoftwareReq) Reset() {
	*x = CreateSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSoftwareReq) ProtoMessage() {}

func (x *CreateSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSoftwareReq.ProtoReflect.Descriptor instead.
func (*CreateSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSoftwareReq) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CreateSoftwareReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *CreateSoftwareReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateSoftwareReq) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *CreateSoftwareReq) GetReleaseMonth() int32 {
	if x != nil {
		return x.ReleaseMonth
	}
	return 0
}

func (x *CreateSoftwareReq) GetReleaseDay() int32 {
	if x != nil {
		return x.ReleaseDay
	}
	return 0
}

func (x *CreateSoftwareReq) GetDeveloperId() int32 {
	if x != nil {
		return x.DeveloperId
	}
	return 0
}

func (x *CreateSoftwareReq) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *CreateSoftwareReq) GetCpuReq() string {
	if x != nil {
		return x.CpuReq
	}
	return ""
}

func (x *CreateSoftwareReq) GetMemoryMinGb() float64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *CreateSoftwareReq) GetDiskMinGb() float64 {
	if x != nil {
		return x.DiskMinGb
	}
	return 0
}

func (x *CreateSoftwareReq) GetSysReqOther() string {
	if x != nil {
		return x.SysReqOther
	}
	return ""
}

func (x *CreateSoftwareReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSoftwareReq) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *CreateSoftwareReq) GetDeploymentMethod() string {
	if x != nil {
		return x.DeploymentMethod
	}
	return ""
}

func (x *CreateSoftwareReq) GetComplianceInfo() string {
	if x != nil {
		return x.ComplianceInfo
	}
	return ""
}

func (x *CreateSoftwareReq) GetSecurityInfo() string {
	if x != nil {
		return x.SecurityInfo
	}
	return ""
}

func (x *CreateSoftwareReq) GetIntellectualProperty() string {
	if x != nil {
		return x.IntellectualProperty
	}
	return ""
}

func (x *CreateSoftwareReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateSoftwareReq) GetIndustryIds() []int32 {
	if x != nil {
		return x.IndustryIds
	}
	return nil
}

func (x *CreateSoftwareReq) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *CreateSoftwareReq) GetBitWidths() []string {
	if x != nil {
		return x.BitWidths
	}
	return nil
}

// 创建软件响应
type CreateSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          // 新创建的软件ID
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSoftwareResp) Reset() {
	*x = CreateSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSoftwareResp) ProtoMessage() {}

func (x *CreateSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSoftwareResp.ProtoReflect.Descriptor instead.
func (*CreateSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSoftwareResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSoftwareResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新软件请求
type UpdateSoftwareReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                 // 必须指定ID
	NameZh               string                 `protobuf:"bytes,2,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"`                                            // 软件中文名称
	NameEn               string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`                                            // 软件英文名称
	Version              string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                                                        // 版本号
	ReleaseYear          int32                  `protobuf:"varint,5,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"`                            // 发布年份（如2023）
	ReleaseMonth         int32                  `protobuf:"varint,6,opt,name=release_month,json=releaseMonth,proto3" json:"release_month,omitempty"`                         // 发布月份（1-12，0表示仅精确到年）
	ReleaseDay           int32                  `protobuf:"varint,7,opt,name=release_day,json=releaseDay,proto3" json:"release_day,omitempty"`                               // 发布日（1-31，0表示仅精确到年或月）
	DeveloperId          int32                  `protobuf:"varint,8,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`                            // 开发商ID
	CountryId            int32                  `protobuf:"varint,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`                                  // 产地国家ID
	CpuReq               string                 `protobuf:"bytes,10,opt,name=cpu_req,json=cpuReq,proto3" json:"cpu_req,omitempty"`                                           // 处理器要求
	MemoryMinGb          float64                `protobuf:"fixed64,11,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`                        // 最小内存要求（GB）
	DiskMinGb            float64                `protobuf:"fixed64,12,opt,name=disk_min_gb,json=diskMinGb,proto3" json:"disk_min_gb,omitempty"`                              // 最小磁盘空间（GB）
	SysReqOther          string                 `protobuf:"bytes,13,opt,name=sys_req_other,json=sysReqOther,proto3" json:"sys_req_other,omitempty"`                          // 其他系统要求
	Description          string                 `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`                                               // 软件描述
	SizeBytes            int64                  `protobuf:"varint,15,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`                                 // 软件大小（KB）
	DeploymentMethod     string                 `protobuf:"bytes,16,opt,name=deployment_method,json=deploymentMethod,proto3" json:"deployment_method,omitempty"`             // 部署方式
	ComplianceInfo       string                 `protobuf:"bytes,17,opt,name=compliance_info,json=complianceInfo,proto3" json:"compliance_info,omitempty"`                   // 合规性信息
	SecurityInfo         string                 `protobuf:"bytes,18,opt,name=security_info,json=securityInfo,proto3" json:"security_info,omitempty"`                         // 安全信息
	IntellectualProperty string                 `protobuf:"bytes,19,opt,name=intellectual_property,json=intellectualProperty,proto3" json:"intellectual_property,omitempty"` // 知识产权信息
	Status               string                 `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`                                                         // 状态（active：有效；inactive：下架；testing：测试中；discontinued：停止维护）
	IndustryIds          []int32                `protobuf:"varint,21,rep,packed,name=industry_ids,json=industryIds,proto3" json:"industry_ids,omitempty"`                    // 适用行业小类ID列表
	OsIds                []int32                `protobuf:"varint,22,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"`                                      // 支持的操作系统ID列表
	BitWidths            []string               `protobuf:"bytes,23,rep,name=bit_widths,json=bitWidths,proto3" json:"bit_widths,omitempty"`                                  // 支持的位宽列表
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateSoftwareReq) Reset() {
	*x = UpdateSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSoftwareReq) ProtoMessage() {}

func (x *UpdateSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSoftwareReq.ProtoReflect.Descriptor instead.
func (*UpdateSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSoftwareReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSoftwareReq) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *UpdateSoftwareReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateSoftwareReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateSoftwareReq) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *UpdateSoftwareReq) GetReleaseMonth() int32 {
	if x != nil {
		return x.ReleaseMonth
	}
	return 0
}

func (x *UpdateSoftwareReq) GetReleaseDay() int32 {
	if x != nil {
		return x.ReleaseDay
	}
	return 0
}

func (x *UpdateSoftwareReq) GetDeveloperId() int32 {
	if x != nil {
		return x.DeveloperId
	}
	return 0
}

func (x *UpdateSoftwareReq) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *UpdateSoftwareReq) GetCpuReq() string {
	if x != nil {
		return x.CpuReq
	}
	return ""
}

func (x *UpdateSoftwareReq) GetMemoryMinGb() float64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *UpdateSoftwareReq) GetDiskMinGb() float64 {
	if x != nil {
		return x.DiskMinGb
	}
	return 0
}

func (x *UpdateSoftwareReq) GetSysReqOther() string {
	if x != nil {
		return x.SysReqOther
	}
	return ""
}

func (x *UpdateSoftwareReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSoftwareReq) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *UpdateSoftwareReq) GetDeploymentMethod() string {
	if x != nil {
		return x.DeploymentMethod
	}
	return ""
}

func (x *UpdateSoftwareReq) GetComplianceInfo() string {
	if x != nil {
		return x.ComplianceInfo
	}
	return ""
}

func (x *UpdateSoftwareReq) GetSecurityInfo() string {
	if x != nil {
		return x.SecurityInfo
	}
	return ""
}

func (x *UpdateSoftwareReq) GetIntellectualProperty() string {
	if x != nil {
		return x.IntellectualProperty
	}
	return ""
}

func (x *UpdateSoftwareReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateSoftwareReq) GetIndustryIds() []int32 {
	if x != nil {
		return x.IndustryIds
	}
	return nil
}

func (x *UpdateSoftwareReq) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *UpdateSoftwareReq) GetBitWidths() []string {
	if x != nil {
		return x.BitWidths
	}
	return nil
}

// 更新软件响应
type UpdateSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSoftwareResp) Reset() {
	*x = UpdateSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSoftwareResp) ProtoMessage() {}

func (x *UpdateSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSoftwareResp.ProtoReflect.Descriptor instead.
func (*UpdateSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSoftwareResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateSoftwareResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询软件请求（支持分页和筛选）
type ListSoftwareReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 修正：proto3 不支持 "= 1" 这种默认值写法，默认值需通过业务代码处理
	Page          int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                                    // 页码，默认第1页
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 每页条数，默认20（修正：移除 "= 20"）
	Keyword       string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`                               // 搜索关键词（名称、开发商）
	CountryId     int32  `protobuf:"varint,4,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`         // 按国家筛选
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`                                 // 按状态筛选
	DeveloperId   int32  `protobuf:"varint,6,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`   // 按开发商筛选
	CategoryCode  string `protobuf:"bytes,7,opt,name=category_code,json=categoryCode,proto3" json:"category_code,omitempty"` // 按类别筛选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoftwareReq) Reset() {
	*x = ListSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoftwareReq) ProtoMessage() {}

func (x *ListSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoftwareReq.ProtoReflect.Descriptor instead.
func (*ListSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{5}
}

func (x *ListSoftwareReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSoftwareReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSoftwareReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSoftwareReq) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *ListSoftwareReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListSoftwareReq) GetDeveloperId() int32 {
	if x != nil {
		return x.DeveloperId
	}
	return 0
}

func (x *ListSoftwareReq) GetCategoryCode() string {
	if x != nil {
		return x.CategoryCode
	}
	return ""
}

// 查询软件响应
type ListSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总条数
	Items         []*IsmsSoftware        `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`  // 软件列表
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoftwareResp) Reset() {
	*x = ListSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoftwareResp) ProtoMessage() {}

func (x *ListSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoftwareResp.ProtoReflect.Descriptor instead.
func (*ListSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{6}
}

func (x *ListSoftwareResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSoftwareResp) GetItems() []*IsmsSoftware {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSoftwareResp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSoftwareResp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 新增：查询单个软件的请求（用于接收ID参数）
type GetSoftwareByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 软件ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSoftwareByIdReq) Reset() {
	*x = GetSoftwareByIdReq{}
	mi := &file_isms_v1_software_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSoftwareByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoftwareByIdReq) ProtoMessage() {}

func (x *GetSoftwareByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoftwareByIdReq.ProtoReflect.Descriptor instead.
func (*GetSoftwareByIdReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{7}
}

func (x *GetSoftwareByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_isms_v1_software_proto protoreflect.FileDescriptor

const file_isms_v1_software_proto_rawDesc = "" +
	"\n" +
	"\x16isms/v1/software.proto\x12\aisms.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\x1a\x16isms/v1/industry.proto\"\xf0\a\n" +
	"\fIsmsSoftware\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12 \n" +
	"\aname_zh\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nameZh\x12\x17\n" +
	"\aname_en\x18\x03 \x01(\tR\x06nameEn\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12!\n" +
	"\frelease_year\x18\x05 \x01(\x05R\vreleaseYear\x12#\n" +
	"\rrelease_month\x18\x06 \x01(\x05R\freleaseMonth\x12\x1f\n" +
	"\vrelease_day\x18\a \x01(\x05R\n" +
	"releaseDay\x12!\n" +
	"\fdeveloper_id\x18\b \x01(\x05R\vdeveloperId\x12\x1d\n" +
	"\n" +
	"country_id\x18\t \x01(\x05R\tcountryId\x12 \n" +
	"\vcountryName\x18\n" +
	" \x01(\tR\vcountryName\x12$\n" +
	"\rdeveloperName\x18\v \x01(\tR\rdeveloperName\x12\x17\n" +
	"\acpu_req\x18\f \x01(\tR\x06cpuReq\x12\"\n" +
	"\rmemory_min_gb\x18\r \x01(\x01R\vmemoryMinGb\x12\x1e\n" +
	"\vdisk_min_gb\x18\x0e \x01(\x01R\tdiskMinGb\x12\"\n" +
	"\rsys_req_other\x18\x0f \x01(\tR\vsysReqOther\x12 \n" +
	"\vdescription\x18\x10 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x11 \x01(\x03R\tsizeBytes\x12+\n" +
	"\x11deployment_method\x18\x12 \x01(\tR\x10deploymentMethod\x12'\n" +
	"\x0fcompliance_info\x18\x13 \x01(\tR\x0ecomplianceInfo\x12#\n" +
	"\rsecurity_info\x18\x14 \x01(\tR\fsecurityInfo\x123\n" +
	"\x15intellectual_property\x18\x15 \x01(\tR\x14intellectualProperty\x12\x16\n" +
	"\x06status\x18\x16 \x01(\tR\x06status\x12!\n" +
	"\findustry_ids\x18\x17 \x03(\x05R\vindustryIds\x12\x15\n" +
	"\x06os_ids\x18\x18 \x03(\x05R\x05osIds\x12\x1d\n" +
	"\n" +
	"created_at\x18\x19 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x1a \x01(\tR\tupdatedAt\x12%\n" +
	"\x0eindustry_names\x18\x1b \x03(\tR\rindustryNames\x12@\n" +
	"\x10industry_details\x18\x1c \x03(\v2\x15.isms.v1.IsmsIndustryR\x0findustryDetails\x12\x1d\n" +
	"\n" +
	"bit_widths\x18\x1d \x03(\tR\tbitWidths\"\xa5\x06\n" +
	"\x11CreateSoftwareReq\x12 \n" +
	"\aname_zh\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06nameZh\x12\x17\n" +
	"\aname_en\x18\x02 \x01(\tR\x06nameEn\x12!\n" +
	"\aversion\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aversion\x12!\n" +
	"\frelease_year\x18\x04 \x01(\x05R\vreleaseYear\x12#\n" +
	"\rrelease_month\x18\x05 \x01(\x05R\freleaseMonth\x12\x1f\n" +
	"\vrelease_day\x18\x06 \x01(\x05R\n" +
	"releaseDay\x12*\n" +
	"\fdeveloper_id\x18\a \x01(\x05B\a\xfaB\x04\x1a\x02 \x00R\vdeveloperId\x12&\n" +
	"\n" +
	"country_id\x18\b \x01(\x05B\a\xfaB\x04\x1a\x02 \x00R\tcountryId\x12\x17\n" +
	"\acpu_req\x18\t \x01(\tR\x06cpuReq\x12\"\n" +
	"\rmemory_min_gb\x18\n" +
	" \x01(\x01R\vmemoryMinGb\x12\x1e\n" +
	"\vdisk_min_gb\x18\v \x01(\x01R\tdiskMinGb\x12\"\n" +
	"\rsys_req_other\x18\f \x01(\tR\vsysReqOther\x12 \n" +
	"\vdescription\x18\r \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x0e \x01(\x03R\tsizeBytes\x12+\n" +
	"\x11deployment_method\x18\x0f \x01(\tR\x10deploymentMethod\x12'\n" +
	"\x0fcompliance_info\x18\x10 \x01(\tR\x0ecomplianceInfo\x12#\n" +
	"\rsecurity_info\x18\x11 \x01(\tR\fsecurityInfo\x123\n" +
	"\x15intellectual_property\x18\x12 \x01(\tR\x14intellectualProperty\x12\x16\n" +
	"\x06status\x18\x13 \x01(\tR\x06status\x12+\n" +
	"\findustry_ids\x18\x14 \x03(\x05B\b\xfaB\x05\x92\x01\x02\b\x01R\vindustryIds\x12\x1f\n" +
	"\x06os_ids\x18\x15 \x03(\x05B\b\xfaB\x05\x92\x01\x02\b\x01R\x05osIds\x12\x1d\n" +
	"\n" +
	"bit_widths\x18\x16 \x03(\tR\tbitWidths\">\n" +
	"\x12CreateSoftwareResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x86\x06\n" +
	"\x11UpdateSoftwareReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\x03B\a\xfaB\x04\"\x02 \x00R\x02id\x12\x17\n" +
	"\aname_zh\x18\x02 \x01(\tR\x06nameZh\x12\x17\n" +
	"\aname_en\x18\x03 \x01(\tR\x06nameEn\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12!\n" +
	"\frelease_year\x18\x05 \x01(\x05R\vreleaseYear\x12#\n" +
	"\rrelease_month\x18\x06 \x01(\x05R\freleaseMonth\x12\x1f\n" +
	"\vrelease_day\x18\a \x01(\x05R\n" +
	"releaseDay\x12!\n" +
	"\fdeveloper_id\x18\b \x01(\x05R\vdeveloperId\x12\x1d\n" +
	"\n" +
	"country_id\x18\t \x01(\x05R\tcountryId\x12\x17\n" +
	"\acpu_req\x18\n" +
	" \x01(\tR\x06cpuReq\x12\"\n" +
	"\rmemory_min_gb\x18\v \x01(\x01R\vmemoryMinGb\x12\x1e\n" +
	"\vdisk_min_gb\x18\f \x01(\x01R\tdiskMinGb\x12\"\n" +
	"\rsys_req_other\x18\r \x01(\tR\vsysReqOther\x12 \n" +
	"\vdescription\x18\x0e \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x0f \x01(\x03R\tsizeBytes\x12+\n" +
	"\x11deployment_method\x18\x10 \x01(\tR\x10deploymentMethod\x12'\n" +
	"\x0fcompliance_info\x18\x11 \x01(\tR\x0ecomplianceInfo\x12#\n" +
	"\rsecurity_info\x18\x12 \x01(\tR\fsecurityInfo\x123\n" +
	"\x15intellectual_property\x18\x13 \x01(\tR\x14intellectualProperty\x12\x16\n" +
	"\x06status\x18\x14 \x01(\tR\x06status\x12!\n" +
	"\findustry_ids\x18\x15 \x03(\x05R\vindustryIds\x12\x15\n" +
	"\x06os_ids\x18\x16 \x03(\x05R\x05osIds\x12\x1d\n" +
	"\n" +
	"bit_widths\x18\x17 \x03(\tR\tbitWidths\"H\n" +
	"\x12UpdateSoftwareResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xed\x01\n" +
	"\x0fListSoftwareReq\x12\x1b\n" +
	"\x04page\x18\x01 \x01(\x05B\a\xfaB\x04\x1a\x02(\x01R\x04page\x12$\n" +
	"\tpage_size\x18\x02 \x01(\x05B\a\xfaB\x04\x1a\x02(\n" +
	"R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\x1d\n" +
	"\n" +
	"country_id\x18\x04 \x01(\x05R\tcountryId\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\x12!\n" +
	"\fdeveloper_id\x18\x06 \x01(\x05R\vdeveloperId\x12#\n" +
	"\rcategory_code\x18\a \x01(\tR\fcategoryCode\"\x86\x01\n" +
	"\x10ListSoftwareResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12+\n" +
	"\x05items\x18\x02 \x03(\v2\x15.isms.v1.IsmsSoftwareR\x05items\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"-\n" +
	"\x12GetSoftwareByIdReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\x03B\a\xfaB\x04\"\x02 \x00R\x02id2\x94\x03\n" +
	"\bSoftware\x12b\n" +
	"\x0eCreateSoftware\x12\x1a.isms.v1.CreateSoftwareReq\x1a\x1b.isms.v1.CreateSoftwareResp\"\x17\x82\xd3\xe4\x93\x02\x11:\x01*\"\f/v1/software\x12g\n" +
	"\x0eUpdateSoftware\x12\x1a.isms.v1.UpdateSoftwareReq\x1a\x1b.isms.v1.UpdateSoftwareResp\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\x1a\x11/v1/software/{id}\x12Y\n" +
	"\fListSoftware\x12\x18.isms.v1.ListSoftwareReq\x1a\x19.isms.v1.ListSoftwareResp\"\x14\x82\xd3\xe4\x93\x02\x0e\x12\f/v1/software\x12`\n" +
	"\x0fGetSoftwareById\x12\x1b.isms.v1.GetSoftwareByIdReq\x1a\x15.isms.v1.IsmsSoftware\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/v1/software/{id}B\x15Z\x13isms/api/isms/v1;v1b\x06proto3"

var (
	file_isms_v1_software_proto_rawDescOnce sync.Once
	file_isms_v1_software_proto_rawDescData []byte
)

func file_isms_v1_software_proto_rawDescGZIP() []byte {
	file_isms_v1_software_proto_rawDescOnce.Do(func() {
		file_isms_v1_software_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_isms_v1_software_proto_rawDesc), len(file_isms_v1_software_proto_rawDesc)))
	})
	return file_isms_v1_software_proto_rawDescData
}

var file_isms_v1_software_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_isms_v1_software_proto_goTypes = []any{
	(*IsmsSoftware)(nil),       // 0: isms.v1.IsmsSoftware
	(*CreateSoftwareReq)(nil),  // 1: isms.v1.CreateSoftwareReq
	(*CreateSoftwareResp)(nil), // 2: isms.v1.CreateSoftwareResp
	(*UpdateSoftwareReq)(nil),  // 3: isms.v1.UpdateSoftwareReq
	(*UpdateSoftwareResp)(nil), // 4: isms.v1.UpdateSoftwareResp
	(*ListSoftwareReq)(nil),    // 5: isms.v1.ListSoftwareReq
	(*ListSoftwareResp)(nil),   // 6: isms.v1.ListSoftwareResp
	(*GetSoftwareByIdReq)(nil), // 7: isms.v1.GetSoftwareByIdReq
	(*IsmsIndustry)(nil),       // 8: isms.v1.IsmsIndustry
}
var file_isms_v1_software_proto_depIdxs = []int32{
	8, // 0: isms.v1.IsmsSoftware.industry_details:type_name -> isms.v1.IsmsIndustry
	0, // 1: isms.v1.ListSoftwareResp.items:type_name -> isms.v1.IsmsSoftware
	1, // 2: isms.v1.Software.CreateSoftware:input_type -> isms.v1.CreateSoftwareReq
	3, // 3: isms.v1.Software.UpdateSoftware:input_type -> isms.v1.UpdateSoftwareReq
	5, // 4: isms.v1.Software.ListSoftware:input_type -> isms.v1.ListSoftwareReq
	7, // 5: isms.v1.Software.GetSoftwareById:input_type -> isms.v1.GetSoftwareByIdReq
	2, // 6: isms.v1.Software.CreateSoftware:output_type -> isms.v1.CreateSoftwareResp
	4, // 7: isms.v1.Software.UpdateSoftware:output_type -> isms.v1.UpdateSoftwareResp
	6, // 8: isms.v1.Software.ListSoftware:output_type -> isms.v1.ListSoftwareResp
	0, // 9: isms.v1.Software.GetSoftwareById:output_type -> isms.v1.IsmsSoftware
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_isms_v1_software_proto_init() }
func file_isms_v1_software_proto_init() {
	if File_isms_v1_software_proto != nil {
		return
	}
	file_isms_v1_industry_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_isms_v1_software_proto_rawDesc), len(file_isms_v1_software_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_isms_v1_software_proto_goTypes,
		DependencyIndexes: file_isms_v1_software_proto_depIdxs,
		MessageInfos:      file_isms_v1_software_proto_msgTypes,
	}.Build()
	File_isms_v1_software_proto = out.File
	file_isms_v1_software_proto_goTypes = nil
	file_isms_v1_software_proto_depIdxs = nil
}
