// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/isms/v1/country.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCountryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCountryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCountryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCountryReqMultiError, or nil if none found.
func (m *CreateCountryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCountryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNameZh()); l < 1 || l > 100 {
		err := CreateCountryReqValidationError{
			field:  "NameZh",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameEn()); l < 1 || l > 100 {
		err := CreateCountryReqValidationError{
			field:  "NameEn",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 2 || l > 10 {
		err := CreateCountryReqValidationError{
			field:  "Code",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContinent()); l < 2 || l > 50 {
		err := CreateCountryReqValidationError{
			field:  "Continent",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCountryReqMultiError(errors)
	}

	return nil
}

// CreateCountryReqMultiError is an error wrapping multiple validation errors
// returned by CreateCountryReq.ValidateAll() if the designated constraints
// aren't met.
type CreateCountryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCountryReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCountryReqMultiError) AllErrors() []error { return m }

// CreateCountryReqValidationError is the validation error returned by
// CreateCountryReq.Validate if the designated constraints aren't met.
type CreateCountryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCountryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCountryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCountryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCountryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCountryReqValidationError) ErrorName() string { return "CreateCountryReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateCountryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCountryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCountryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCountryReqValidationError{}

// Validate checks the field values on UpdateCountryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateCountryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCountryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCountryReqMultiError, or nil if none found.
func (m *UpdateCountryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCountryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCountryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameZh()); l < 1 || l > 100 {
		err := UpdateCountryReqValidationError{
			field:  "NameZh",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNameEn()); l < 1 || l > 100 {
		err := UpdateCountryReqValidationError{
			field:  "NameEn",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 2 || l > 10 {
		err := UpdateCountryReqValidationError{
			field:  "Code",
			reason: "value length must be between 2 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContinent()); l < 2 || l > 50 {
		err := UpdateCountryReqValidationError{
			field:  "Continent",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCountryReqMultiError(errors)
	}

	return nil
}

// UpdateCountryReqMultiError is an error wrapping multiple validation errors
// returned by UpdateCountryReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateCountryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCountryReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCountryReqMultiError) AllErrors() []error { return m }

// UpdateCountryReqValidationError is the validation error returned by
// UpdateCountryReq.Validate if the designated constraints aren't met.
type UpdateCountryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCountryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCountryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCountryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCountryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCountryReqValidationError) ErrorName() string { return "UpdateCountryReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateCountryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCountryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCountryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCountryReqValidationError{}

// Validate checks the field values on DeleteCountryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCountryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCountryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCountryReqMultiError, or nil if none found.
func (m *DeleteCountryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCountryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCountryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCountryReqMultiError(errors)
	}

	return nil
}

// DeleteCountryReqMultiError is an error wrapping multiple validation errors
// returned by DeleteCountryReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteCountryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCountryReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCountryReqMultiError) AllErrors() []error { return m }

// DeleteCountryReqValidationError is the validation error returned by
// DeleteCountryReq.Validate if the designated constraints aren't met.
type DeleteCountryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCountryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCountryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCountryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCountryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCountryReqValidationError) ErrorName() string { return "DeleteCountryReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCountryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCountryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCountryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCountryReqValidationError{}

// Validate checks the field values on DeleteCountryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCountryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCountryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCountryRespMultiError, or nil if none found.
func (m *DeleteCountryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCountryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCountryRespMultiError(errors)
	}

	return nil
}

// DeleteCountryRespMultiError is an error wrapping multiple validation errors
// returned by DeleteCountryResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteCountryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCountryRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCountryRespMultiError) AllErrors() []error { return m }

// DeleteCountryRespValidationError is the validation error returned by
// DeleteCountryResp.Validate if the designated constraints aren't met.
type DeleteCountryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCountryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCountryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCountryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCountryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCountryRespValidationError) ErrorName() string {
	return "DeleteCountryRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCountryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCountryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCountryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCountryRespValidationError{}

// Validate checks the field values on GetCountryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCountryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCountryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCountryReqMultiError, or
// nil if none found.
func (m *GetCountryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCountryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCountryReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCountryReqMultiError(errors)
	}

	return nil
}

// GetCountryReqMultiError is an error wrapping multiple validation errors
// returned by GetCountryReq.ValidateAll() if the designated constraints
// aren't met.
type GetCountryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCountryReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCountryReqMultiError) AllErrors() []error { return m }

// GetCountryReqValidationError is the validation error returned by
// GetCountryReq.Validate if the designated constraints aren't met.
type GetCountryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCountryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCountryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCountryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCountryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCountryReqValidationError) ErrorName() string { return "GetCountryReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCountryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCountryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCountryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCountryReqValidationError{}

// Validate checks the field values on ListCountriesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCountriesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountriesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCountriesReqMultiError, or nil if none found.
func (m *ListCountriesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountriesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListCountriesReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 100 {
		err := ListCountriesReqValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Continent

	if len(errors) > 0 {
		return ListCountriesReqMultiError(errors)
	}

	return nil
}

// ListCountriesReqMultiError is an error wrapping multiple validation errors
// returned by ListCountriesReq.ValidateAll() if the designated constraints
// aren't met.
type ListCountriesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountriesReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountriesReqMultiError) AllErrors() []error { return m }

// ListCountriesReqValidationError is the validation error returned by
// ListCountriesReq.Validate if the designated constraints aren't met.
type ListCountriesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountriesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountriesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountriesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountriesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountriesReqValidationError) ErrorName() string { return "ListCountriesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListCountriesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountriesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountriesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountriesReqValidationError{}

// Validate checks the field values on CountryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CountryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountryRespMultiError, or
// nil if none found.
func (m *CountryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NameZh

	// no validation rules for NameEn

	// no validation rules for Code

	// no validation rules for Continent

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CountryRespMultiError(errors)
	}

	return nil
}

// CountryRespMultiError is an error wrapping multiple validation errors
// returned by CountryResp.ValidateAll() if the designated constraints aren't met.
type CountryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryRespMultiError) AllErrors() []error { return m }

// CountryRespValidationError is the validation error returned by
// CountryResp.Validate if the designated constraints aren't met.
type CountryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryRespValidationError) ErrorName() string { return "CountryRespValidationError" }

// Error satisfies the builtin error interface
func (e CountryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryRespValidationError{}

// Validate checks the field values on ListCountriesResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCountriesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCountriesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCountriesRespMultiError, or nil if none found.
func (m *ListCountriesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCountriesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCountriesRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCountriesRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCountriesRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCountriesRespMultiError(errors)
	}

	return nil
}

// ListCountriesRespMultiError is an error wrapping multiple validation errors
// returned by ListCountriesResp.ValidateAll() if the designated constraints
// aren't met.
type ListCountriesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCountriesRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCountriesRespMultiError) AllErrors() []error { return m }

// ListCountriesRespValidationError is the validation error returned by
// ListCountriesResp.Validate if the designated constraints aren't met.
type ListCountriesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCountriesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCountriesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCountriesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCountriesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCountriesRespValidationError) ErrorName() string {
	return "ListCountriesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListCountriesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCountriesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCountriesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCountriesRespValidationError{}
