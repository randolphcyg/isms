// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsSoftwareOS(db *gorm.DB, opts ...gen.DOOption) ismsSoftwareOS {
	_ismsSoftwareOS := ismsSoftwareOS{}

	_ismsSoftwareOS.ismsSoftwareOSDo.UseDB(db, opts...)
	_ismsSoftwareOS.ismsSoftwareOSDo.UseModel(&model.IsmsSoftwareOS{})

	tableName := _ismsSoftwareOS.ismsSoftwareOSDo.TableName()
	_ismsSoftwareOS.ALL = field.NewAsterisk(tableName)
	_ismsSoftwareOS.SoftwareID = field.NewInt32(tableName, "software_id")
	_ismsSoftwareOS.OsID = field.NewInt32(tableName, "os_id")
	_ismsSoftwareOS.Note = field.NewString(tableName, "note")
	_ismsSoftwareOS.CreatedAt = field.NewTime(tableName, "created_at")

	_ismsSoftwareOS.fillFieldMap()

	return _ismsSoftwareOS
}

// ismsSoftwareOS 软件与操作系统多对多关联表
type ismsSoftwareOS struct {
	ismsSoftwareOSDo ismsSoftwareOSDo

	ALL        field.Asterisk
	SoftwareID field.Int32  // 软件ID（关联isms_software.id）
	OsID       field.Int32  // 操作系统ID（关联isms_operating_system.id）
	Note       field.String // 备注（如仅支持专业版）
	CreatedAt  field.Time   // 关联创建时间

	fieldMap map[string]field.Expr
}

func (i ismsSoftwareOS) Table(newTableName string) *ismsSoftwareOS {
	i.ismsSoftwareOSDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsSoftwareOS) As(alias string) *ismsSoftwareOS {
	i.ismsSoftwareOSDo.DO = *(i.ismsSoftwareOSDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsSoftwareOS) updateTableName(table string) *ismsSoftwareOS {
	i.ALL = field.NewAsterisk(table)
	i.SoftwareID = field.NewInt32(table, "software_id")
	i.OsID = field.NewInt32(table, "os_id")
	i.Note = field.NewString(table, "note")
	i.CreatedAt = field.NewTime(table, "created_at")

	i.fillFieldMap()

	return i
}

func (i *ismsSoftwareOS) WithContext(ctx context.Context) IIsmsSoftwareOSDo {
	return i.ismsSoftwareOSDo.WithContext(ctx)
}

func (i ismsSoftwareOS) TableName() string { return i.ismsSoftwareOSDo.TableName() }

func (i ismsSoftwareOS) Alias() string { return i.ismsSoftwareOSDo.Alias() }

func (i ismsSoftwareOS) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsSoftwareOSDo.Columns(cols...)
}

func (i *ismsSoftwareOS) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsSoftwareOS) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["software_id"] = i.SoftwareID
	i.fieldMap["os_id"] = i.OsID
	i.fieldMap["note"] = i.Note
	i.fieldMap["created_at"] = i.CreatedAt
}

func (i ismsSoftwareOS) clone(db *gorm.DB) ismsSoftwareOS {
	i.ismsSoftwareOSDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsSoftwareOS) replaceDB(db *gorm.DB) ismsSoftwareOS {
	i.ismsSoftwareOSDo.ReplaceDB(db)
	return i
}

type ismsSoftwareOSDo struct{ gen.DO }

type IIsmsSoftwareOSDo interface {
	gen.SubQuery
	Debug() IIsmsSoftwareOSDo
	WithContext(ctx context.Context) IIsmsSoftwareOSDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsSoftwareOSDo
	WriteDB() IIsmsSoftwareOSDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsSoftwareOSDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsSoftwareOSDo
	Not(conds ...gen.Condition) IIsmsSoftwareOSDo
	Or(conds ...gen.Condition) IIsmsSoftwareOSDo
	Select(conds ...field.Expr) IIsmsSoftwareOSDo
	Where(conds ...gen.Condition) IIsmsSoftwareOSDo
	Order(conds ...field.Expr) IIsmsSoftwareOSDo
	Distinct(cols ...field.Expr) IIsmsSoftwareOSDo
	Omit(cols ...field.Expr) IIsmsSoftwareOSDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo
	Group(cols ...field.Expr) IIsmsSoftwareOSDo
	Having(conds ...gen.Condition) IIsmsSoftwareOSDo
	Limit(limit int) IIsmsSoftwareOSDo
	Offset(offset int) IIsmsSoftwareOSDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareOSDo
	Unscoped() IIsmsSoftwareOSDo
	Create(values ...*model.IsmsSoftwareOS) error
	CreateInBatches(values []*model.IsmsSoftwareOS, batchSize int) error
	Save(values ...*model.IsmsSoftwareOS) error
	First() (*model.IsmsSoftwareOS, error)
	Take() (*model.IsmsSoftwareOS, error)
	Last() (*model.IsmsSoftwareOS, error)
	Find() ([]*model.IsmsSoftwareOS, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareOS, err error)
	FindInBatches(result *[]*model.IsmsSoftwareOS, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsSoftwareOS) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsSoftwareOSDo
	Assign(attrs ...field.AssignExpr) IIsmsSoftwareOSDo
	Joins(fields ...field.RelationField) IIsmsSoftwareOSDo
	Preload(fields ...field.RelationField) IIsmsSoftwareOSDo
	FirstOrInit() (*model.IsmsSoftwareOS, error)
	FirstOrCreate() (*model.IsmsSoftwareOS, error)
	FindByPage(offset int, limit int) (result []*model.IsmsSoftwareOS, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsSoftwareOSDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsSoftwareOSDo) Debug() IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsSoftwareOSDo) WithContext(ctx context.Context) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsSoftwareOSDo) ReadDB() IIsmsSoftwareOSDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsSoftwareOSDo) WriteDB() IIsmsSoftwareOSDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsSoftwareOSDo) Session(config *gorm.Session) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsSoftwareOSDo) Clauses(conds ...clause.Expression) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsSoftwareOSDo) Returning(value interface{}, columns ...string) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsSoftwareOSDo) Not(conds ...gen.Condition) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsSoftwareOSDo) Or(conds ...gen.Condition) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsSoftwareOSDo) Select(conds ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsSoftwareOSDo) Where(conds ...gen.Condition) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsSoftwareOSDo) Order(conds ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsSoftwareOSDo) Distinct(cols ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsSoftwareOSDo) Omit(cols ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsSoftwareOSDo) Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsSoftwareOSDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsSoftwareOSDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsSoftwareOSDo) Group(cols ...field.Expr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsSoftwareOSDo) Having(conds ...gen.Condition) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsSoftwareOSDo) Limit(limit int) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsSoftwareOSDo) Offset(offset int) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsSoftwareOSDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsSoftwareOSDo) Unscoped() IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsSoftwareOSDo) Create(values ...*model.IsmsSoftwareOS) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsSoftwareOSDo) CreateInBatches(values []*model.IsmsSoftwareOS, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsSoftwareOSDo) Save(values ...*model.IsmsSoftwareOS) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsSoftwareOSDo) First() (*model.IsmsSoftwareOS, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareOS), nil
	}
}

func (i ismsSoftwareOSDo) Take() (*model.IsmsSoftwareOS, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareOS), nil
	}
}

func (i ismsSoftwareOSDo) Last() (*model.IsmsSoftwareOS, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareOS), nil
	}
}

func (i ismsSoftwareOSDo) Find() ([]*model.IsmsSoftwareOS, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsSoftwareOS), err
}

func (i ismsSoftwareOSDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftwareOS, err error) {
	buf := make([]*model.IsmsSoftwareOS, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsSoftwareOSDo) FindInBatches(result *[]*model.IsmsSoftwareOS, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsSoftwareOSDo) Attrs(attrs ...field.AssignExpr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsSoftwareOSDo) Assign(attrs ...field.AssignExpr) IIsmsSoftwareOSDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsSoftwareOSDo) Joins(fields ...field.RelationField) IIsmsSoftwareOSDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsSoftwareOSDo) Preload(fields ...field.RelationField) IIsmsSoftwareOSDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsSoftwareOSDo) FirstOrInit() (*model.IsmsSoftwareOS, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareOS), nil
	}
}

func (i ismsSoftwareOSDo) FirstOrCreate() (*model.IsmsSoftwareOS, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftwareOS), nil
	}
}

func (i ismsSoftwareOSDo) FindByPage(offset int, limit int) (result []*model.IsmsSoftwareOS, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsSoftwareOSDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsSoftwareOSDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsSoftwareOSDo) Delete(models ...*model.IsmsSoftwareOS) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsSoftwareOSDo) withDO(do gen.Dao) *ismsSoftwareOSDo {
	i.DO = *do.(*gen.DO)
	return i
}
