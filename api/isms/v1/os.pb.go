// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: isms/v1/os.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建操作系统请求
type CreateOSReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                   // 系统名称（如：Microsoft Windows、Ubuntu）
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                             // 系统版本（如：7、10、20.04 LTS）
	Manufacturer  string                 `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`                   // 系统开发商（如：Microsoft、Canonical）
	Architecture  string                 `protobuf:"bytes,4,opt,name=architecture,proto3" json:"architecture,omitempty"`                   // 硬件架构 (如 x86, x64, arm32, arm64)
	ReleaseYear   int32                  `protobuf:"varint,5,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"` // 发布年份
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                     // 系统说明（如包含的细分版本）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOSReq) Reset() {
	*x = CreateOSReq{}
	mi := &file_isms_v1_os_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOSReq) ProtoMessage() {}

func (x *CreateOSReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOSReq.ProtoReflect.Descriptor instead.
func (*CreateOSReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOSReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOSReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateOSReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *CreateOSReq) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *CreateOSReq) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *CreateOSReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 更新操作系统请求
type UpdateOSReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 操作系统ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // 系统名称（如：Microsoft Windows、Ubuntu）
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                             // 系统版本（如：7、10、20.04 LTS）
	Manufacturer  string                 `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`                   // 系统开发商（如：Microsoft、Canonical）
	Architecture  string                 `protobuf:"bytes,5,opt,name=architecture,proto3" json:"architecture,omitempty"`                   // 硬件架构 (如 x86, x64, arm32, arm64)
	ReleaseYear   int32                  `protobuf:"varint,6,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"` // 发布年份
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                     // 系统说明（如包含的细分版本）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOSReq) Reset() {
	*x = UpdateOSReq{}
	mi := &file_isms_v1_os_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOSReq) ProtoMessage() {}

func (x *UpdateOSReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOSReq.ProtoReflect.Descriptor instead.
func (*UpdateOSReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateOSReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOSReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOSReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateOSReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *UpdateOSReq) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *UpdateOSReq) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *UpdateOSReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 删除操作系统请求
type DeleteOSReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 操作系统ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOSReq) Reset() {
	*x = DeleteOSReq{}
	mi := &file_isms_v1_os_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOSReq) ProtoMessage() {}

func (x *DeleteOSReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOSReq.ProtoReflect.Descriptor instead.
func (*DeleteOSReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteOSReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除操作系统响应
type DeleteOSResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否删除成功
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 操作消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOSResp) Reset() {
	*x = DeleteOSResp{}
	mi := &file_isms_v1_os_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOSResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOSResp) ProtoMessage() {}

func (x *DeleteOSResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOSResp.ProtoReflect.Descriptor instead.
func (*DeleteOSResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteOSResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteOSResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询单个操作系统请求
type GetOSReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 操作系统ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOSReq) Reset() {
	*x = GetOSReq{}
	mi := &file_isms_v1_os_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOSReq) ProtoMessage() {}

func (x *GetOSReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOSReq.ProtoReflect.Descriptor instead.
func (*GetOSReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{4}
}

func (x *GetOSReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 分页查询操作系统请求
type ListOSReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页条数
	Keyword       string                 `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键词(匹配名称或版本)
	Manufacturer  string                 `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`          // 按开发商筛选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOSReq) Reset() {
	*x = ListOSReq{}
	mi := &file_isms_v1_os_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOSReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSReq) ProtoMessage() {}

func (x *ListOSReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSReq.ProtoReflect.Descriptor instead.
func (*ListOSReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{5}
}

func (x *ListOSReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOSReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOSReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListOSReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

// 单个操作系统响应
type OSResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                      // 自增ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   // 系统名称（如：Microsoft Windows、Ubuntu）
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                             // 系统版本（如：7、10、20.04 LTS）
	Architecture  string                 `protobuf:"bytes,4,opt,name=architecture,proto3" json:"architecture,omitempty"`                   // 硬件架构
	Manufacturer  string                 `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`                   // 系统开发商（如：Microsoft、Canonical）
	ReleaseYear   int32                  `protobuf:"varint,6,opt,name=release_year,json=releaseYear,proto3" json:"release_year,omitempty"` // 发布年份
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                     // 系统说明（如包含的细分版本）
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`        // 创建时间(RFC3339)
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`        // 更新时间(RFC3339)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSResp) Reset() {
	*x = OSResp{}
	mi := &file_isms_v1_os_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSResp) ProtoMessage() {}

func (x *OSResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSResp.ProtoReflect.Descriptor instead.
func (*OSResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{6}
}

func (x *OSResp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OSResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OSResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OSResp) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *OSResp) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *OSResp) GetReleaseYear() int32 {
	if x != nil {
		return x.ReleaseYear
	}
	return 0
}

func (x *OSResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OSResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OSResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 操作系统列表响应
type ListOSResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*OSResp              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`                        // 操作系统列表
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总记录数
	Page          uint32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页码
	PageSize      uint32                 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页条数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOSResp) Reset() {
	*x = ListOSResp{}
	mi := &file_isms_v1_os_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOSResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOSResp) ProtoMessage() {}

func (x *ListOSResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_os_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOSResp.ProtoReflect.Descriptor instead.
func (*ListOSResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_os_proto_rawDescGZIP(), []int{7}
}

func (x *ListOSResp) GetItems() []*OSResp {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListOSResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListOSResp) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListOSResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_isms_v1_os_proto protoreflect.FileDescriptor

const file_isms_v1_os_proto_rawDesc = "" +
	"\n" +
	"\x10isms/v1/os.proto\x12\aisms.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"\x8b\x02\n" +
	"\vCreateOSReq\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\x04name\x12#\n" +
	"\aversion\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x182R\aversion\x12.\n" +
	"\fmanufacturer\x18\x03 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\fmanufacturer\x12-\n" +
	"\farchitecture\x18\x04 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18\x14R\farchitecture\x12+\n" +
	"\frelease_year\x18\x05 \x01(\x05B\b\xfaB\x05\x1a\x03\x18\xee\x0fR\vreleaseYear\x12+\n" +
	"\vdescription\x18\x06 \x01(\tB\t\xfaB\x06r\x04\x18\xff\xff\x03R\vdescription\"\xa4\x02\n" +
	"\vUpdateOSReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\x04name\x12#\n" +
	"\aversion\x18\x03 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x182R\aversion\x12.\n" +
	"\fmanufacturer\x18\x04 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\fmanufacturer\x12-\n" +
	"\farchitecture\x18\x05 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18\x14R\farchitecture\x12+\n" +
	"\frelease_year\x18\x06 \x01(\x05B\b\xfaB\x05\x1a\x03\x18\xee\x0fR\vreleaseYear\x12+\n" +
	"\vdescription\x18\a \x01(\tB\t\xfaB\x06r\x04\x18\xff\xff\x03R\vdescription\"&\n" +
	"\vDeleteOSReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\"B\n" +
	"\fDeleteOSResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"#\n" +
	"\bGetOSReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\"\x8e\x01\n" +
	"\tListOSReq\x12\x1b\n" +
	"\x04page\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x04page\x12&\n" +
	"\tpage_size\x18\x02 \x01(\rB\t\xfaB\x06*\x04\x18d \x00R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\"\n" +
	"\fmanufacturer\x18\x04 \x01(\tR\fmanufacturer\"\x91\x02\n" +
	"\x06OSResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\"\n" +
	"\farchitecture\x18\x04 \x01(\tR\farchitecture\x12\"\n" +
	"\fmanufacturer\x18\x05 \x01(\tR\fmanufacturer\x12!\n" +
	"\frelease_year\x18\x06 \x01(\x05R\vreleaseYear\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"created_at\x18\b \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\t \x01(\tR\tupdatedAt\"z\n" +
	"\n" +
	"ListOSResp\x12%\n" +
	"\x05items\x18\x01 \x03(\v2\x0f.isms.v1.OSRespR\x05items\x12\x14\n" +
	"\x05total\x18\x02 \x01(\rR\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\rR\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\rR\bpageSize2\xe8\x02\n" +
	"\x02OS\x12D\n" +
	"\bCreateOS\x12\x14.isms.v1.CreateOSReq\x1a\x0f.isms.v1.OSResp\"\x11\x82\xd3\xe4\x93\x02\v:\x01*\"\x06/v1/os\x12I\n" +
	"\bUpdateOS\x12\x14.isms.v1.UpdateOSReq\x1a\x0f.isms.v1.OSResp\"\x16\x82\xd3\xe4\x93\x02\x10:\x01*\x1a\v/v1/os/{id}\x12L\n" +
	"\bDeleteOS\x12\x14.isms.v1.DeleteOSReq\x1a\x15.isms.v1.DeleteOSResp\"\x13\x82\xd3\xe4\x93\x02\r*\v/v1/os/{id}\x12@\n" +
	"\x05GetOS\x12\x11.isms.v1.GetOSReq\x1a\x0f.isms.v1.OSResp\"\x13\x82\xd3\xe4\x93\x02\r\x12\v/v1/os/{id}\x12A\n" +
	"\x06ListOS\x12\x12.isms.v1.ListOSReq\x1a\x13.isms.v1.ListOSResp\"\x0e\x82\xd3\xe4\x93\x02\b\x12\x06/v1/osB\x15Z\x13isms/api/isms/v1;v1b\x06proto3"

var (
	file_isms_v1_os_proto_rawDescOnce sync.Once
	file_isms_v1_os_proto_rawDescData []byte
)

func file_isms_v1_os_proto_rawDescGZIP() []byte {
	file_isms_v1_os_proto_rawDescOnce.Do(func() {
		file_isms_v1_os_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_isms_v1_os_proto_rawDesc), len(file_isms_v1_os_proto_rawDesc)))
	})
	return file_isms_v1_os_proto_rawDescData
}

var file_isms_v1_os_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_isms_v1_os_proto_goTypes = []any{
	(*CreateOSReq)(nil),  // 0: isms.v1.CreateOSReq
	(*UpdateOSReq)(nil),  // 1: isms.v1.UpdateOSReq
	(*DeleteOSReq)(nil),  // 2: isms.v1.DeleteOSReq
	(*DeleteOSResp)(nil), // 3: isms.v1.DeleteOSResp
	(*GetOSReq)(nil),     // 4: isms.v1.GetOSReq
	(*ListOSReq)(nil),    // 5: isms.v1.ListOSReq
	(*OSResp)(nil),       // 6: isms.v1.OSResp
	(*ListOSResp)(nil),   // 7: isms.v1.ListOSResp
}
var file_isms_v1_os_proto_depIdxs = []int32{
	6, // 0: isms.v1.ListOSResp.items:type_name -> isms.v1.OSResp
	0, // 1: isms.v1.OS.CreateOS:input_type -> isms.v1.CreateOSReq
	1, // 2: isms.v1.OS.UpdateOS:input_type -> isms.v1.UpdateOSReq
	2, // 3: isms.v1.OS.DeleteOS:input_type -> isms.v1.DeleteOSReq
	4, // 4: isms.v1.OS.GetOS:input_type -> isms.v1.GetOSReq
	5, // 5: isms.v1.OS.ListOS:input_type -> isms.v1.ListOSReq
	6, // 6: isms.v1.OS.CreateOS:output_type -> isms.v1.OSResp
	6, // 7: isms.v1.OS.UpdateOS:output_type -> isms.v1.OSResp
	3, // 8: isms.v1.OS.DeleteOS:output_type -> isms.v1.DeleteOSResp
	6, // 9: isms.v1.OS.GetOS:output_type -> isms.v1.OSResp
	7, // 10: isms.v1.OS.ListOS:output_type -> isms.v1.ListOSResp
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_isms_v1_os_proto_init() }
func file_isms_v1_os_proto_init() {
	if File_isms_v1_os_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_isms_v1_os_proto_rawDesc), len(file_isms_v1_os_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_isms_v1_os_proto_goTypes,
		DependencyIndexes: file_isms_v1_os_proto_depIdxs,
		MessageInfos:      file_isms_v1_os_proto_msgTypes,
	}.Build()
	File_isms_v1_os_proto = out.File
	file_isms_v1_os_proto_goTypes = nil
	file_isms_v1_os_proto_depIdxs = nil
}
