// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/isms/v1/dashboard.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDashboardGetOverviewStats = "/isms.v1.Dashboard/GetOverviewStats"
const OperationDashboardGetSoftwareByCountryStats = "/isms.v1.Dashboard/GetSoftwareByCountryStats"
const OperationDashboardGetSoftwareByDeveloperStats = "/isms.v1.Dashboard/GetSoftwareByDeveloperStats"
const OperationDashboardGetSoftwareByIndustryStats = "/isms.v1.Dashboard/GetSoftwareByIndustryStats"
const OperationDashboardGetSoftwareByStatusStats = "/isms.v1.Dashboard/GetSoftwareByStatusStats"
const OperationDashboardGetSoftwareTrendStats = "/isms.v1.Dashboard/GetSoftwareTrendStats"

type DashboardHTTPServer interface {
	// GetOverviewStats 获取概览统计数据
	GetOverviewStats(context.Context, *GetOverviewStatsReq) (*GetOverviewStatsResp, error)
	// GetSoftwareByCountryStats 获取软件按国家分布统计
	GetSoftwareByCountryStats(context.Context, *GetSoftwareByCountryStatsReq) (*GetSoftwareByCountryStatsResp, error)
	// GetSoftwareByDeveloperStats 获取软件按开发商分布统计
	GetSoftwareByDeveloperStats(context.Context, *GetSoftwareByDeveloperStatsReq) (*GetSoftwareByDeveloperStatsResp, error)
	// GetSoftwareByIndustryStats 获取软件按行业分布统计
	GetSoftwareByIndustryStats(context.Context, *GetSoftwareByIndustryStatsReq) (*GetSoftwareByIndustryStatsResp, error)
	// GetSoftwareByStatusStats 获取软件按状态分布统计
	GetSoftwareByStatusStats(context.Context, *GetSoftwareByStatusStatsReq) (*GetSoftwareByStatusStatsResp, error)
	// GetSoftwareTrendStats 获取软件按年份发布趋势统计
	GetSoftwareTrendStats(context.Context, *GetSoftwareTrendStatsReq) (*GetSoftwareTrendStatsResp, error)
}

func RegisterDashboardHTTPServer(s *http.Server, srv DashboardHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/dashboard/overview", _Dashboard_GetOverviewStats0_HTTP_Handler(srv))
	r.GET("/v1/dashboard/software-by-industry", _Dashboard_GetSoftwareByIndustryStats0_HTTP_Handler(srv))
	r.GET("/v1/dashboard/software-by-country", _Dashboard_GetSoftwareByCountryStats0_HTTP_Handler(srv))
	r.GET("/v1/dashboard/software-by-developer", _Dashboard_GetSoftwareByDeveloperStats0_HTTP_Handler(srv))
	r.GET("/v1/dashboard/software-trend", _Dashboard_GetSoftwareTrendStats0_HTTP_Handler(srv))
	r.GET("/v1/dashboard/software-by-status", _Dashboard_GetSoftwareByStatusStats0_HTTP_Handler(srv))
}

func _Dashboard_GetOverviewStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOverviewStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetOverviewStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOverviewStats(ctx, req.(*GetOverviewStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOverviewStatsResp)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_GetSoftwareByIndustryStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSoftwareByIndustryStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetSoftwareByIndustryStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSoftwareByIndustryStats(ctx, req.(*GetSoftwareByIndustryStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSoftwareByIndustryStatsResp)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_GetSoftwareByCountryStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSoftwareByCountryStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetSoftwareByCountryStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSoftwareByCountryStats(ctx, req.(*GetSoftwareByCountryStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSoftwareByCountryStatsResp)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_GetSoftwareByDeveloperStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSoftwareByDeveloperStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetSoftwareByDeveloperStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSoftwareByDeveloperStats(ctx, req.(*GetSoftwareByDeveloperStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSoftwareByDeveloperStatsResp)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_GetSoftwareTrendStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSoftwareTrendStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetSoftwareTrendStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSoftwareTrendStats(ctx, req.(*GetSoftwareTrendStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSoftwareTrendStatsResp)
		return ctx.Result(200, reply)
	}
}

func _Dashboard_GetSoftwareByStatusStats0_HTTP_Handler(srv DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSoftwareByStatusStatsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDashboardGetSoftwareByStatusStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSoftwareByStatusStats(ctx, req.(*GetSoftwareByStatusStatsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSoftwareByStatusStatsResp)
		return ctx.Result(200, reply)
	}
}

type DashboardHTTPClient interface {
	GetOverviewStats(ctx context.Context, req *GetOverviewStatsReq, opts ...http.CallOption) (rsp *GetOverviewStatsResp, err error)
	GetSoftwareByCountryStats(ctx context.Context, req *GetSoftwareByCountryStatsReq, opts ...http.CallOption) (rsp *GetSoftwareByCountryStatsResp, err error)
	GetSoftwareByDeveloperStats(ctx context.Context, req *GetSoftwareByDeveloperStatsReq, opts ...http.CallOption) (rsp *GetSoftwareByDeveloperStatsResp, err error)
	GetSoftwareByIndustryStats(ctx context.Context, req *GetSoftwareByIndustryStatsReq, opts ...http.CallOption) (rsp *GetSoftwareByIndustryStatsResp, err error)
	GetSoftwareByStatusStats(ctx context.Context, req *GetSoftwareByStatusStatsReq, opts ...http.CallOption) (rsp *GetSoftwareByStatusStatsResp, err error)
	GetSoftwareTrendStats(ctx context.Context, req *GetSoftwareTrendStatsReq, opts ...http.CallOption) (rsp *GetSoftwareTrendStatsResp, err error)
}

type DashboardHTTPClientImpl struct {
	cc *http.Client
}

func NewDashboardHTTPClient(client *http.Client) DashboardHTTPClient {
	return &DashboardHTTPClientImpl{client}
}

func (c *DashboardHTTPClientImpl) GetOverviewStats(ctx context.Context, in *GetOverviewStatsReq, opts ...http.CallOption) (*GetOverviewStatsResp, error) {
	var out GetOverviewStatsResp
	pattern := "/v1/dashboard/overview"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetOverviewStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) GetSoftwareByCountryStats(ctx context.Context, in *GetSoftwareByCountryStatsReq, opts ...http.CallOption) (*GetSoftwareByCountryStatsResp, error) {
	var out GetSoftwareByCountryStatsResp
	pattern := "/v1/dashboard/software-by-country"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetSoftwareByCountryStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) GetSoftwareByDeveloperStats(ctx context.Context, in *GetSoftwareByDeveloperStatsReq, opts ...http.CallOption) (*GetSoftwareByDeveloperStatsResp, error) {
	var out GetSoftwareByDeveloperStatsResp
	pattern := "/v1/dashboard/software-by-developer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetSoftwareByDeveloperStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) GetSoftwareByIndustryStats(ctx context.Context, in *GetSoftwareByIndustryStatsReq, opts ...http.CallOption) (*GetSoftwareByIndustryStatsResp, error) {
	var out GetSoftwareByIndustryStatsResp
	pattern := "/v1/dashboard/software-by-industry"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetSoftwareByIndustryStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) GetSoftwareByStatusStats(ctx context.Context, in *GetSoftwareByStatusStatsReq, opts ...http.CallOption) (*GetSoftwareByStatusStatsResp, error) {
	var out GetSoftwareByStatusStatsResp
	pattern := "/v1/dashboard/software-by-status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetSoftwareByStatusStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DashboardHTTPClientImpl) GetSoftwareTrendStats(ctx context.Context, in *GetSoftwareTrendStatsReq, opts ...http.CallOption) (*GetSoftwareTrendStatsResp, error) {
	var out GetSoftwareTrendStatsResp
	pattern := "/v1/dashboard/software-trend"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDashboardGetSoftwareTrendStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
