// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: isms/v1/country.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCountryCreateCountry = "/isms.v1.Country/CreateCountry"
const OperationCountryDeleteCountry = "/isms.v1.Country/DeleteCountry"
const OperationCountryGetCountry = "/isms.v1.Country/GetCountry"
const OperationCountryListCountries = "/isms.v1.Country/ListCountries"
const OperationCountryUpdateCountry = "/isms.v1.Country/UpdateCountry"

type CountryHTTPServer interface {
	// CreateCountry 创建国家
	CreateCountry(context.Context, *CreateCountryReq) (*CountryResp, error)
	// DeleteCountry 删除国家
	DeleteCountry(context.Context, *DeleteCountryReq) (*DeleteCountryResp, error)
	// GetCountry 查询单个国家
	GetCountry(context.Context, *GetCountryReq) (*CountryResp, error)
	// ListCountries 分页查询国家列表
	ListCountries(context.Context, *ListCountriesReq) (*ListCountriesResp, error)
	// UpdateCountry 更新国家
	UpdateCountry(context.Context, *UpdateCountryReq) (*CountryResp, error)
}

func RegisterCountryHTTPServer(s *http.Server, srv CountryHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/countries", _Country_CreateCountry0_HTTP_Handler(srv))
	r.PUT("/v1/countries/{id}", _Country_UpdateCountry0_HTTP_Handler(srv))
	r.DELETE("/v1/countries/{id}", _Country_DeleteCountry0_HTTP_Handler(srv))
	r.GET("/v1/countries/{id}", _Country_GetCountry0_HTTP_Handler(srv))
	r.GET("/v1/countries", _Country_ListCountries0_HTTP_Handler(srv))
}

func _Country_CreateCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCountryReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryCreateCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCountry(ctx, req.(*CreateCountryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountryResp)
		return ctx.Result(200, reply)
	}
}

func _Country_UpdateCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCountryReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryUpdateCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCountry(ctx, req.(*UpdateCountryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountryResp)
		return ctx.Result(200, reply)
	}
}

func _Country_DeleteCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCountryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryDeleteCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCountry(ctx, req.(*DeleteCountryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCountryResp)
		return ctx.Result(200, reply)
	}
}

func _Country_GetCountry0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCountryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryGetCountry)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCountry(ctx, req.(*GetCountryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CountryResp)
		return ctx.Result(200, reply)
	}
}

func _Country_ListCountries0_HTTP_Handler(srv CountryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCountriesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCountryListCountries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCountries(ctx, req.(*ListCountriesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCountriesResp)
		return ctx.Result(200, reply)
	}
}

type CountryHTTPClient interface {
	CreateCountry(ctx context.Context, req *CreateCountryReq, opts ...http.CallOption) (rsp *CountryResp, err error)
	DeleteCountry(ctx context.Context, req *DeleteCountryReq, opts ...http.CallOption) (rsp *DeleteCountryResp, err error)
	GetCountry(ctx context.Context, req *GetCountryReq, opts ...http.CallOption) (rsp *CountryResp, err error)
	ListCountries(ctx context.Context, req *ListCountriesReq, opts ...http.CallOption) (rsp *ListCountriesResp, err error)
	UpdateCountry(ctx context.Context, req *UpdateCountryReq, opts ...http.CallOption) (rsp *CountryResp, err error)
}

type CountryHTTPClientImpl struct {
	cc *http.Client
}

func NewCountryHTTPClient(client *http.Client) CountryHTTPClient {
	return &CountryHTTPClientImpl{client}
}

func (c *CountryHTTPClientImpl) CreateCountry(ctx context.Context, in *CreateCountryReq, opts ...http.CallOption) (*CountryResp, error) {
	var out CountryResp
	pattern := "/v1/countries"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCountryCreateCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CountryHTTPClientImpl) DeleteCountry(ctx context.Context, in *DeleteCountryReq, opts ...http.CallOption) (*DeleteCountryResp, error) {
	var out DeleteCountryResp
	pattern := "/v1/countries/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCountryDeleteCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CountryHTTPClientImpl) GetCountry(ctx context.Context, in *GetCountryReq, opts ...http.CallOption) (*CountryResp, error) {
	var out CountryResp
	pattern := "/v1/countries/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCountryGetCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CountryHTTPClientImpl) ListCountries(ctx context.Context, in *ListCountriesReq, opts ...http.CallOption) (*ListCountriesResp, error) {
	var out ListCountriesResp
	pattern := "/v1/countries"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCountryListCountries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CountryHTTPClientImpl) UpdateCountry(ctx context.Context, in *UpdateCountryReq, opts ...http.CallOption) (*CountryResp, error) {
	var out CountryResp
	pattern := "/v1/countries/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCountryUpdateCountry))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
