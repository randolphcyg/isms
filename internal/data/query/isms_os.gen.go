// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsO(db *gorm.DB, opts ...gen.DOOption) ismsO {
	_ismsO := ismsO{}

	_ismsO.ismsODo.UseDB(db, opts...)
	_ismsO.ismsODo.UseModel(&model.IsmsO{})

	tableName := _ismsO.ismsODo.TableName()
	_ismsO.ALL = field.NewAsterisk(tableName)
	_ismsO.ID = field.NewInt32(tableName, "id")
	_ismsO.Name = field.NewString(tableName, "name")
	_ismsO.Version = field.NewString(tableName, "version")
	_ismsO.Architecture = field.NewString(tableName, "architecture")
	_ismsO.Manufacturer = field.NewString(tableName, "manufacturer")
	_ismsO.ReleaseYear = field.NewInt32(tableName, "release_year")
	_ismsO.Description = field.NewString(tableName, "description")
	_ismsO.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsO.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ismsO.fillFieldMap()

	return _ismsO
}

// ismsO 操作系统表
type ismsO struct {
	ismsODo ismsODo

	ALL          field.Asterisk
	ID           field.Int32  // 自增ID
	Name         field.String // 系统名称（如：Microsoft Windows、Ubuntu）
	Version      field.String // 系统版本（如：7、10、20.04 LTS）
	Architecture field.String // 硬件架构
	Manufacturer field.String // 系统开发商（如：Microsoft、Canonical）
	ReleaseYear  field.Int32  // 发布年份
	Description  field.String // 系统说明（如包含的细分版本）
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i ismsO) Table(newTableName string) *ismsO {
	i.ismsODo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsO) As(alias string) *ismsO {
	i.ismsODo.DO = *(i.ismsODo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsO) updateTableName(table string) *ismsO {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Name = field.NewString(table, "name")
	i.Version = field.NewString(table, "version")
	i.Architecture = field.NewString(table, "architecture")
	i.Manufacturer = field.NewString(table, "manufacturer")
	i.ReleaseYear = field.NewInt32(table, "release_year")
	i.Description = field.NewString(table, "description")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *ismsO) WithContext(ctx context.Context) IIsmsODo { return i.ismsODo.WithContext(ctx) }

func (i ismsO) TableName() string { return i.ismsODo.TableName() }

func (i ismsO) Alias() string { return i.ismsODo.Alias() }

func (i ismsO) Columns(cols ...field.Expr) gen.Columns { return i.ismsODo.Columns(cols...) }

func (i *ismsO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsO) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["version"] = i.Version
	i.fieldMap["architecture"] = i.Architecture
	i.fieldMap["manufacturer"] = i.Manufacturer
	i.fieldMap["release_year"] = i.ReleaseYear
	i.fieldMap["description"] = i.Description
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i ismsO) clone(db *gorm.DB) ismsO {
	i.ismsODo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsO) replaceDB(db *gorm.DB) ismsO {
	i.ismsODo.ReplaceDB(db)
	return i
}

type ismsODo struct{ gen.DO }

type IIsmsODo interface {
	gen.SubQuery
	Debug() IIsmsODo
	WithContext(ctx context.Context) IIsmsODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsODo
	WriteDB() IIsmsODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsODo
	Not(conds ...gen.Condition) IIsmsODo
	Or(conds ...gen.Condition) IIsmsODo
	Select(conds ...field.Expr) IIsmsODo
	Where(conds ...gen.Condition) IIsmsODo
	Order(conds ...field.Expr) IIsmsODo
	Distinct(cols ...field.Expr) IIsmsODo
	Omit(cols ...field.Expr) IIsmsODo
	Join(table schema.Tabler, on ...field.Expr) IIsmsODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsODo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsODo
	Group(cols ...field.Expr) IIsmsODo
	Having(conds ...gen.Condition) IIsmsODo
	Limit(limit int) IIsmsODo
	Offset(offset int) IIsmsODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsODo
	Unscoped() IIsmsODo
	Create(values ...*model.IsmsO) error
	CreateInBatches(values []*model.IsmsO, batchSize int) error
	Save(values ...*model.IsmsO) error
	First() (*model.IsmsO, error)
	Take() (*model.IsmsO, error)
	Last() (*model.IsmsO, error)
	Find() ([]*model.IsmsO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsO, err error)
	FindInBatches(result *[]*model.IsmsO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsODo
	Assign(attrs ...field.AssignExpr) IIsmsODo
	Joins(fields ...field.RelationField) IIsmsODo
	Preload(fields ...field.RelationField) IIsmsODo
	FirstOrInit() (*model.IsmsO, error)
	FirstOrCreate() (*model.IsmsO, error)
	FindByPage(offset int, limit int) (result []*model.IsmsO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsODo) Debug() IIsmsODo {
	return i.withDO(i.DO.Debug())
}

func (i ismsODo) WithContext(ctx context.Context) IIsmsODo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsODo) ReadDB() IIsmsODo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsODo) WriteDB() IIsmsODo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsODo) Session(config *gorm.Session) IIsmsODo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsODo) Clauses(conds ...clause.Expression) IIsmsODo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsODo) Returning(value interface{}, columns ...string) IIsmsODo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsODo) Not(conds ...gen.Condition) IIsmsODo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsODo) Or(conds ...gen.Condition) IIsmsODo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsODo) Select(conds ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsODo) Where(conds ...gen.Condition) IIsmsODo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsODo) Order(conds ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsODo) Distinct(cols ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsODo) Omit(cols ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsODo) Join(table schema.Tabler, on ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsODo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsODo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsODo) Group(cols ...field.Expr) IIsmsODo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsODo) Having(conds ...gen.Condition) IIsmsODo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsODo) Limit(limit int) IIsmsODo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsODo) Offset(offset int) IIsmsODo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsODo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsODo) Unscoped() IIsmsODo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsODo) Create(values ...*model.IsmsO) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsODo) CreateInBatches(values []*model.IsmsO, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsODo) Save(values ...*model.IsmsO) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsODo) First() (*model.IsmsO, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsO), nil
	}
}

func (i ismsODo) Take() (*model.IsmsO, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsO), nil
	}
}

func (i ismsODo) Last() (*model.IsmsO, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsO), nil
	}
}

func (i ismsODo) Find() ([]*model.IsmsO, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsO), err
}

func (i ismsODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsO, err error) {
	buf := make([]*model.IsmsO, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsODo) FindInBatches(result *[]*model.IsmsO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsODo) Attrs(attrs ...field.AssignExpr) IIsmsODo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsODo) Assign(attrs ...field.AssignExpr) IIsmsODo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsODo) Joins(fields ...field.RelationField) IIsmsODo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsODo) Preload(fields ...field.RelationField) IIsmsODo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsODo) FirstOrInit() (*model.IsmsO, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsO), nil
	}
}

func (i ismsODo) FirstOrCreate() (*model.IsmsO, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsO), nil
	}
}

func (i ismsODo) FindByPage(offset int, limit int) (result []*model.IsmsO, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsODo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsODo) Delete(models ...*model.IsmsO) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsODo) withDO(do gen.Dao) *ismsODo {
	i.DO = *do.(*gen.DO)
	return i
}
