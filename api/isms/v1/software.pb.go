// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: isms/v1/software.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 工业软件主表数据结构
type IsmsSoftware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 自增ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // 软件名称
	NameEn        string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`           // 英文名称
	Developer     string                 `protobuf:"bytes,4,opt,name=developer,proto3" json:"developer,omitempty"`                   // 开发商（关联开发商表ID或名称）
	Version       string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`                       // 软件版本
	Category      string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`                     // 软件类别（如CAD、CAE、MES等）
	OsIds         []int32                `protobuf:"varint,7,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"`      // 支持的操作系统ID列表（关联操作系统表）
	Description   string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`               // 软件描述
	CountryId     int64                  `protobuf:"varint,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"` // 所属国家ID（关联国家表）
	Website       string                 `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`                      // 官网地址
	Status        int32                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`                       // 状态（1=正常，0=停用）
	CreatedAt     string                 `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt     string                 `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsmsSoftware) Reset() {
	*x = IsmsSoftware{}
	mi := &file_isms_v1_software_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsmsSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsmsSoftware) ProtoMessage() {}

func (x *IsmsSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsmsSoftware.ProtoReflect.Descriptor instead.
func (*IsmsSoftware) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{0}
}

func (x *IsmsSoftware) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IsmsSoftware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsmsSoftware) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *IsmsSoftware) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *IsmsSoftware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IsmsSoftware) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *IsmsSoftware) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *IsmsSoftware) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IsmsSoftware) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *IsmsSoftware) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *IsmsSoftware) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IsmsSoftware) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *IsmsSoftware) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 创建软件请求
type CreateSoftwareReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NameEn        string                 `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Developer     string                 `protobuf:"bytes,3,opt,name=developer,proto3" json:"developer,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Category      string                 `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	OsIds         []int32                `protobuf:"varint,6,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"` // 至少支持一个操作系统（修正：补充校验规则）
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	CountryId     int64                  `protobuf:"varint,8,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Website       string                 `protobuf:"bytes,9,opt,name=website,proto3" json:"website,omitempty"`
	Status        int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"` // 状态（1=正常，0=停用）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSoftwareReq) Reset() {
	*x = CreateSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSoftwareReq) ProtoMessage() {}

func (x *CreateSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSoftwareReq.ProtoReflect.Descriptor instead.
func (*CreateSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSoftwareReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSoftwareReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *CreateSoftwareReq) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *CreateSoftwareReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateSoftwareReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CreateSoftwareReq) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *CreateSoftwareReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSoftwareReq) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *CreateSoftwareReq) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *CreateSoftwareReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 创建软件响应
type CreateSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`          // 新创建的软件ID
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSoftwareResp) Reset() {
	*x = CreateSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSoftwareResp) ProtoMessage() {}

func (x *CreateSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSoftwareResp.ProtoReflect.Descriptor instead.
func (*CreateSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSoftwareResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSoftwareResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新软件请求
type UpdateSoftwareReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 必须指定ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 可选更新字段
	NameEn        string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	Developer     string                 `protobuf:"bytes,4,opt,name=developer,proto3" json:"developer,omitempty"`
	Version       string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Category      string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	OsIds         []int32                `protobuf:"varint,7,rep,packed,name=os_ids,json=osIds,proto3" json:"os_ids,omitempty"`
	Description   string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	CountryId     int64                  `protobuf:"varint,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Website       string                 `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	Status        int32                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSoftwareReq) Reset() {
	*x = UpdateSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSoftwareReq) ProtoMessage() {}

func (x *UpdateSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSoftwareReq.ProtoReflect.Descriptor instead.
func (*UpdateSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSoftwareReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSoftwareReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSoftwareReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateSoftwareReq) GetDeveloper() string {
	if x != nil {
		return x.Developer
	}
	return ""
}

func (x *UpdateSoftwareReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpdateSoftwareReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateSoftwareReq) GetOsIds() []int32 {
	if x != nil {
		return x.OsIds
	}
	return nil
}

func (x *UpdateSoftwareReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSoftwareReq) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *UpdateSoftwareReq) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UpdateSoftwareReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 更新软件响应
type UpdateSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSoftwareResp) Reset() {
	*x = UpdateSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSoftwareResp) ProtoMessage() {}

func (x *UpdateSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSoftwareResp.ProtoReflect.Descriptor instead.
func (*UpdateSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSoftwareResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateSoftwareResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询软件请求（支持分页和筛选）
type ListSoftwareReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 修正：proto3 不支持 "= 1" 这种默认值写法，默认值需通过业务代码处理
	Page          int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                            // 页码，默认第1页
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页条数，默认20（修正：移除 "= 20"）
	Keyword       string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`                       // 搜索关键词（名称、开发商）
	Category      string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`                     // 按类别筛选
	CountryId     int64  `protobuf:"varint,5,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"` // 按国家筛选
	Status        int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                        // 按状态筛选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoftwareReq) Reset() {
	*x = ListSoftwareReq{}
	mi := &file_isms_v1_software_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoftwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoftwareReq) ProtoMessage() {}

func (x *ListSoftwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoftwareReq.ProtoReflect.Descriptor instead.
func (*ListSoftwareReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{5}
}

func (x *ListSoftwareReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSoftwareReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSoftwareReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSoftwareReq) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListSoftwareReq) GetCountryId() int64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *ListSoftwareReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 查询软件响应
type ListSoftwareResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总条数
	Items         []*IsmsSoftware        `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`  // 软件列表
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoftwareResp) Reset() {
	*x = ListSoftwareResp{}
	mi := &file_isms_v1_software_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoftwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoftwareResp) ProtoMessage() {}

func (x *ListSoftwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoftwareResp.ProtoReflect.Descriptor instead.
func (*ListSoftwareResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{6}
}

func (x *ListSoftwareResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSoftwareResp) GetItems() []*IsmsSoftware {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSoftwareResp) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSoftwareResp) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 新增：查询单个软件的请求（用于接收ID参数）
type GetSoftwareByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 软件ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSoftwareByIdReq) Reset() {
	*x = GetSoftwareByIdReq{}
	mi := &file_isms_v1_software_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSoftwareByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoftwareByIdReq) ProtoMessage() {}

func (x *GetSoftwareByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_software_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoftwareByIdReq.ProtoReflect.Descriptor instead.
func (*GetSoftwareByIdReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_software_proto_rawDescGZIP(), []int{7}
}

func (x *GetSoftwareByIdReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_isms_v1_software_proto protoreflect.FileDescriptor

const file_isms_v1_software_proto_rawDesc = "" +
	"\n" +
	"\x16isms/v1/software.proto\x12\aisms.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"\xf0\x02\n" +
	"\fIsmsSoftware\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\x04name\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\x17\n" +
	"\aname_en\x18\x03 \x01(\tR\x06nameEn\x12\x1c\n" +
	"\tdeveloper\x18\x04 \x01(\tR\tdeveloper\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12\x1a\n" +
	"\bcategory\x18\x06 \x01(\tR\bcategory\x12\x15\n" +
	"\x06os_ids\x18\a \x03(\x05R\x05osIds\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"country_id\x18\t \x01(\x03R\tcountryId\x12\x18\n" +
	"\awebsite\x18\n" +
	" \x01(\tR\awebsite\x12\x16\n" +
	"\x06status\x18\v \x01(\x05R\x06status\x12\x1d\n" +
	"\n" +
	"created_at\x18\f \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\r \x01(\tR\tupdatedAt\"\xea\x02\n" +
	"\x11CreateSoftwareReq\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\x17\n" +
	"\aname_en\x18\x02 \x01(\tR\x06nameEn\x12%\n" +
	"\tdeveloper\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\tdeveloper\x12!\n" +
	"\aversion\x18\x04 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\aversion\x12#\n" +
	"\bcategory\x18\x05 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bcategory\x12\x1f\n" +
	"\x06os_ids\x18\x06 \x03(\x05B\b\xfaB\x05\x92\x01\x02\b\x01R\x05osIds\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x12&\n" +
	"\n" +
	"country_id\x18\b \x01(\x03B\a\xfaB\x04\"\x02 \x00R\tcountryId\x12\"\n" +
	"\awebsite\x18\t \x01(\tB\b\xfaB\x05r\x03\x88\x01\x01R\awebsite\x12!\n" +
	"\x06status\x18\n" +
	" \x01(\x05B\t\xfaB\x06\x1a\x040\x000\x01R\x06status\">\n" +
	"\x12CreateSoftwareResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xb7\x02\n" +
	"\x11UpdateSoftwareReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\x03B\a\xfaB\x04\"\x02 \x00R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x17\n" +
	"\aname_en\x18\x03 \x01(\tR\x06nameEn\x12\x1c\n" +
	"\tdeveloper\x18\x04 \x01(\tR\tdeveloper\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12\x1a\n" +
	"\bcategory\x18\x06 \x01(\tR\bcategory\x12\x15\n" +
	"\x06os_ids\x18\a \x03(\x05R\x05osIds\x12 \n" +
	"\vdescription\x18\b \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"country_id\x18\t \x01(\x03R\tcountryId\x12\x18\n" +
	"\awebsite\x18\n" +
	" \x01(\tR\awebsite\x12\x16\n" +
	"\x06status\x18\v \x01(\x05R\x06status\"H\n" +
	"\x12UpdateSoftwareResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\xc1\x01\n" +
	"\x0fListSoftwareReq\x12\x1b\n" +
	"\x04page\x18\x01 \x01(\x05B\a\xfaB\x04\x1a\x02(\x01R\x04page\x12$\n" +
	"\tpage_size\x18\x02 \x01(\x05B\a\xfaB\x04\x1a\x02(\n" +
	"R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x1d\n" +
	"\n" +
	"country_id\x18\x05 \x01(\x03R\tcountryId\x12\x16\n" +
	"\x06status\x18\x06 \x01(\x05R\x06status\"\x86\x01\n" +
	"\x10ListSoftwareResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12+\n" +
	"\x05items\x18\x02 \x03(\v2\x15.isms.v1.IsmsSoftwareR\x05items\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"-\n" +
	"\x12GetSoftwareByIdReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\x03B\a\xfaB\x04\"\x02 \x00R\x02id2\x94\x03\n" +
	"\bSoftware\x12b\n" +
	"\x0eCreateSoftware\x12\x1a.isms.v1.CreateSoftwareReq\x1a\x1b.isms.v1.CreateSoftwareResp\"\x17\x82\xd3\xe4\x93\x02\x11:\x01*\"\f/v1/software\x12g\n" +
	"\x0eUpdateSoftware\x12\x1a.isms.v1.UpdateSoftwareReq\x1a\x1b.isms.v1.UpdateSoftwareResp\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\x1a\x11/v1/software/{id}\x12Y\n" +
	"\fListSoftware\x12\x18.isms.v1.ListSoftwareReq\x1a\x19.isms.v1.ListSoftwareResp\"\x14\x82\xd3\xe4\x93\x02\x0e\x12\f/v1/software\x12`\n" +
	"\x0fGetSoftwareById\x12\x1b.isms.v1.GetSoftwareByIdReq\x1a\x15.isms.v1.IsmsSoftware\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/v1/software/{id}B\x15Z\x13isms/api/isms/v1;v1b\x06proto3"

var (
	file_isms_v1_software_proto_rawDescOnce sync.Once
	file_isms_v1_software_proto_rawDescData []byte
)

func file_isms_v1_software_proto_rawDescGZIP() []byte {
	file_isms_v1_software_proto_rawDescOnce.Do(func() {
		file_isms_v1_software_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_isms_v1_software_proto_rawDesc), len(file_isms_v1_software_proto_rawDesc)))
	})
	return file_isms_v1_software_proto_rawDescData
}

var file_isms_v1_software_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_isms_v1_software_proto_goTypes = []any{
	(*IsmsSoftware)(nil),       // 0: isms.v1.IsmsSoftware
	(*CreateSoftwareReq)(nil),  // 1: isms.v1.CreateSoftwareReq
	(*CreateSoftwareResp)(nil), // 2: isms.v1.CreateSoftwareResp
	(*UpdateSoftwareReq)(nil),  // 3: isms.v1.UpdateSoftwareReq
	(*UpdateSoftwareResp)(nil), // 4: isms.v1.UpdateSoftwareResp
	(*ListSoftwareReq)(nil),    // 5: isms.v1.ListSoftwareReq
	(*ListSoftwareResp)(nil),   // 6: isms.v1.ListSoftwareResp
	(*GetSoftwareByIdReq)(nil), // 7: isms.v1.GetSoftwareByIdReq
}
var file_isms_v1_software_proto_depIdxs = []int32{
	0, // 0: isms.v1.ListSoftwareResp.items:type_name -> isms.v1.IsmsSoftware
	1, // 1: isms.v1.Software.CreateSoftware:input_type -> isms.v1.CreateSoftwareReq
	3, // 2: isms.v1.Software.UpdateSoftware:input_type -> isms.v1.UpdateSoftwareReq
	5, // 3: isms.v1.Software.ListSoftware:input_type -> isms.v1.ListSoftwareReq
	7, // 4: isms.v1.Software.GetSoftwareById:input_type -> isms.v1.GetSoftwareByIdReq
	2, // 5: isms.v1.Software.CreateSoftware:output_type -> isms.v1.CreateSoftwareResp
	4, // 6: isms.v1.Software.UpdateSoftware:output_type -> isms.v1.UpdateSoftwareResp
	6, // 7: isms.v1.Software.ListSoftware:output_type -> isms.v1.ListSoftwareResp
	0, // 8: isms.v1.Software.GetSoftwareById:output_type -> isms.v1.IsmsSoftware
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_isms_v1_software_proto_init() }
func file_isms_v1_software_proto_init() {
	if File_isms_v1_software_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_isms_v1_software_proto_rawDesc), len(file_isms_v1_software_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_isms_v1_software_proto_goTypes,
		DependencyIndexes: file_isms_v1_software_proto_depIdxs,
		MessageInfos:      file_isms_v1_software_proto_msgTypes,
	}.Build()
	File_isms_v1_software_proto = out.File
	file_isms_v1_software_proto_goTypes = nil
	file_isms_v1_software_proto_depIdxs = nil
}
