// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: isms/v1/country.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建国家请求
type CreateCountryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NameZh        string                 `protobuf:"bytes,1,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"` // 中文名称
	NameEn        string                 `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"` // 英文名称
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                   // 国家代码(ISO标准)
	Continent     string                 `protobuf:"bytes,4,opt,name=continent,proto3" json:"continent,omitempty"`         // 所属大洲
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCountryReq) Reset() {
	*x = CreateCountryReq{}
	mi := &file_isms_v1_country_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCountryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCountryReq) ProtoMessage() {}

func (x *CreateCountryReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCountryReq.ProtoReflect.Descriptor instead.
func (*CreateCountryReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCountryReq) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CreateCountryReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *CreateCountryReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateCountryReq) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

// 更新国家请求
type UpdateCountryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      // 国家ID
	NameZh        string                 `protobuf:"bytes,2,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"` // 中文名称(可选更新)
	NameEn        string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"` // 英文名称(可选更新)
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                   // 国家代码(可选更新)
	Continent     string                 `protobuf:"bytes,5,opt,name=continent,proto3" json:"continent,omitempty"`         // 所属大洲(可选更新)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCountryReq) Reset() {
	*x = UpdateCountryReq{}
	mi := &file_isms_v1_country_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCountryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCountryReq) ProtoMessage() {}

func (x *UpdateCountryReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCountryReq.ProtoReflect.Descriptor instead.
func (*UpdateCountryReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCountryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCountryReq) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *UpdateCountryReq) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateCountryReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UpdateCountryReq) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

// 删除国家请求
type DeleteCountryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 国家ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCountryReq) Reset() {
	*x = DeleteCountryReq{}
	mi := &file_isms_v1_country_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCountryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCountryReq) ProtoMessage() {}

func (x *DeleteCountryReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCountryReq.ProtoReflect.Descriptor instead.
func (*DeleteCountryReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCountryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 删除国家响应
type DeleteCountryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否删除成功
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`  // 操作消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCountryResp) Reset() {
	*x = DeleteCountryResp{}
	mi := &file_isms_v1_country_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCountryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCountryResp) ProtoMessage() {}

func (x *DeleteCountryResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCountryResp.ProtoReflect.Descriptor instead.
func (*DeleteCountryResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCountryResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteCountryResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询单个国家请求
type GetCountryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 国家ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCountryReq) Reset() {
	*x = GetCountryReq{}
	mi := &file_isms_v1_country_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCountryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountryReq) ProtoMessage() {}

func (x *GetCountryReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountryReq.ProtoReflect.Descriptor instead.
func (*GetCountryReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{4}
}

func (x *GetCountryReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 分页查询国家请求
type ListCountriesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页条数
	Keyword       string                 `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键词(匹配名称或代码)
	Continent     string                 `protobuf:"bytes,4,opt,name=continent,proto3" json:"continent,omitempty"`                // 按大洲筛选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCountriesReq) Reset() {
	*x = ListCountriesReq{}
	mi := &file_isms_v1_country_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCountriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCountriesReq) ProtoMessage() {}

func (x *ListCountriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCountriesReq.ProtoReflect.Descriptor instead.
func (*ListCountriesReq) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{5}
}

func (x *ListCountriesReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCountriesReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCountriesReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListCountriesReq) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

// 单个国家响应
type CountryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // 国家ID
	NameZh        string                 `protobuf:"bytes,2,opt,name=name_zh,json=nameZh,proto3" json:"name_zh,omitempty"`          // 中文名称
	NameEn        string                 `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`          // 英文名称
	Code          string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                            // 国家代码
	Continent     string                 `protobuf:"bytes,5,opt,name=continent,proto3" json:"continent,omitempty"`                  // 所属大洲
	CreatedAt     string                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间(RFC3339)
	UpdatedAt     string                 `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间(RFC3339)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountryResp) Reset() {
	*x = CountryResp{}
	mi := &file_isms_v1_country_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResp) ProtoMessage() {}

func (x *CountryResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResp.ProtoReflect.Descriptor instead.
func (*CountryResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{6}
}

func (x *CountryResp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CountryResp) GetNameZh() string {
	if x != nil {
		return x.NameZh
	}
	return ""
}

func (x *CountryResp) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *CountryResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CountryResp) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *CountryResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CountryResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 国家列表响应
type ListCountriesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CountryResp         `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`                        // 国家列表
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总记录数
	Page          uint32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页码
	PageSize      uint32                 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页条数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCountriesResp) Reset() {
	*x = ListCountriesResp{}
	mi := &file_isms_v1_country_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCountriesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCountriesResp) ProtoMessage() {}

func (x *ListCountriesResp) ProtoReflect() protoreflect.Message {
	mi := &file_isms_v1_country_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCountriesResp.ProtoReflect.Descriptor instead.
func (*ListCountriesResp) Descriptor() ([]byte, []int) {
	return file_isms_v1_country_proto_rawDescGZIP(), []int{7}
}

func (x *ListCountriesResp) GetItems() []*CountryResp {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListCountriesResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCountriesResp) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCountriesResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_isms_v1_country_proto protoreflect.FileDescriptor

const file_isms_v1_country_proto_rawDesc = "" +
	"\n" +
	"\x15isms/v1/country.proto\x12\aisms.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"\xa2\x01\n" +
	"\x10CreateCountryReq\x12\"\n" +
	"\aname_zh\x18\x01 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x06nameZh\x12\"\n" +
	"\aname_en\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x06nameEn\x12\x1d\n" +
	"\x04code\x18\x03 \x01(\tB\t\xfaB\x06r\x04\x10\x02\x18\n" +
	"R\x04code\x12'\n" +
	"\tcontinent\x18\x04 \x01(\tB\t\xfaB\x06r\x04\x10\x02\x182R\tcontinent\"\xbb\x01\n" +
	"\x10UpdateCountryReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\x12\"\n" +
	"\aname_zh\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x06nameZh\x12\"\n" +
	"\aname_en\x18\x03 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x06nameEn\x12\x1d\n" +
	"\x04code\x18\x04 \x01(\tB\t\xfaB\x06r\x04\x10\x02\x18\n" +
	"R\x04code\x12'\n" +
	"\tcontinent\x18\x05 \x01(\tB\t\xfaB\x06r\x04\x10\x02\x182R\tcontinent\"+\n" +
	"\x10DeleteCountryReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\"G\n" +
	"\x11DeleteCountryResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"(\n" +
	"\rGetCountryReq\x12\x17\n" +
	"\x02id\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x02id\"\x8f\x01\n" +
	"\x10ListCountriesReq\x12\x1b\n" +
	"\x04page\x18\x01 \x01(\rB\a\xfaB\x04*\x02 \x00R\x04page\x12&\n" +
	"\tpage_size\x18\x02 \x01(\rB\t\xfaB\x06*\x04\x18d \x00R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\x1c\n" +
	"\tcontinent\x18\x04 \x01(\tR\tcontinent\"\xbf\x01\n" +
	"\vCountryResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x17\n" +
	"\aname_zh\x18\x02 \x01(\tR\x06nameZh\x12\x17\n" +
	"\aname_en\x18\x03 \x01(\tR\x06nameEn\x12\x12\n" +
	"\x04code\x18\x04 \x01(\tR\x04code\x12\x1c\n" +
	"\tcontinent\x18\x05 \x01(\tR\tcontinent\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\a \x01(\tR\tupdatedAt\"\x86\x01\n" +
	"\x11ListCountriesResp\x12*\n" +
	"\x05items\x18\x01 \x03(\v2\x14.isms.v1.CountryRespR\x05items\x12\x14\n" +
	"\x05total\x18\x02 \x01(\rR\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\rR\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\rR\bpageSize2\xe1\x03\n" +
	"\aCountry\x12Z\n" +
	"\rCreateCountry\x12\x19.isms.v1.CreateCountryReq\x1a\x14.isms.v1.CountryResp\"\x18\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/v1/countries\x12_\n" +
	"\rUpdateCountry\x12\x19.isms.v1.UpdateCountryReq\x1a\x14.isms.v1.CountryResp\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\x1a\x12/v1/countries/{id}\x12b\n" +
	"\rDeleteCountry\x12\x19.isms.v1.DeleteCountryReq\x1a\x1a.isms.v1.DeleteCountryResp\"\x1a\x82\xd3\xe4\x93\x02\x14*\x12/v1/countries/{id}\x12V\n" +
	"\n" +
	"GetCountry\x12\x16.isms.v1.GetCountryReq\x1a\x14.isms.v1.CountryResp\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/v1/countries/{id}\x12]\n" +
	"\rListCountries\x12\x19.isms.v1.ListCountriesReq\x1a\x1a.isms.v1.ListCountriesResp\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/v1/countriesB\x15Z\x13isms/api/isms/v1;v1b\x06proto3"

var (
	file_isms_v1_country_proto_rawDescOnce sync.Once
	file_isms_v1_country_proto_rawDescData []byte
)

func file_isms_v1_country_proto_rawDescGZIP() []byte {
	file_isms_v1_country_proto_rawDescOnce.Do(func() {
		file_isms_v1_country_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_isms_v1_country_proto_rawDesc), len(file_isms_v1_country_proto_rawDesc)))
	})
	return file_isms_v1_country_proto_rawDescData
}

var file_isms_v1_country_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_isms_v1_country_proto_goTypes = []any{
	(*CreateCountryReq)(nil),  // 0: isms.v1.CreateCountryReq
	(*UpdateCountryReq)(nil),  // 1: isms.v1.UpdateCountryReq
	(*DeleteCountryReq)(nil),  // 2: isms.v1.DeleteCountryReq
	(*DeleteCountryResp)(nil), // 3: isms.v1.DeleteCountryResp
	(*GetCountryReq)(nil),     // 4: isms.v1.GetCountryReq
	(*ListCountriesReq)(nil),  // 5: isms.v1.ListCountriesReq
	(*CountryResp)(nil),       // 6: isms.v1.CountryResp
	(*ListCountriesResp)(nil), // 7: isms.v1.ListCountriesResp
}
var file_isms_v1_country_proto_depIdxs = []int32{
	6, // 0: isms.v1.ListCountriesResp.items:type_name -> isms.v1.CountryResp
	0, // 1: isms.v1.Country.CreateCountry:input_type -> isms.v1.CreateCountryReq
	1, // 2: isms.v1.Country.UpdateCountry:input_type -> isms.v1.UpdateCountryReq
	2, // 3: isms.v1.Country.DeleteCountry:input_type -> isms.v1.DeleteCountryReq
	4, // 4: isms.v1.Country.GetCountry:input_type -> isms.v1.GetCountryReq
	5, // 5: isms.v1.Country.ListCountries:input_type -> isms.v1.ListCountriesReq
	6, // 6: isms.v1.Country.CreateCountry:output_type -> isms.v1.CountryResp
	6, // 7: isms.v1.Country.UpdateCountry:output_type -> isms.v1.CountryResp
	3, // 8: isms.v1.Country.DeleteCountry:output_type -> isms.v1.DeleteCountryResp
	6, // 9: isms.v1.Country.GetCountry:output_type -> isms.v1.CountryResp
	7, // 10: isms.v1.Country.ListCountries:output_type -> isms.v1.ListCountriesResp
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_isms_v1_country_proto_init() }
func file_isms_v1_country_proto_init() {
	if File_isms_v1_country_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_isms_v1_country_proto_rawDesc), len(file_isms_v1_country_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_isms_v1_country_proto_goTypes,
		DependencyIndexes: file_isms_v1_country_proto_depIdxs,
		MessageInfos:      file_isms_v1_country_proto_msgTypes,
	}.Build()
	File_isms_v1_country_proto = out.File
	file_isms_v1_country_proto_goTypes = nil
	file_isms_v1_country_proto_depIdxs = nil
}
