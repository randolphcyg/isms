// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"isms/internal/data/model"
)

func newIsmsSoftware(db *gorm.DB, opts ...gen.DOOption) ismsSoftware {
	_ismsSoftware := ismsSoftware{}

	_ismsSoftware.ismsSoftwareDo.UseDB(db, opts...)
	_ismsSoftware.ismsSoftwareDo.UseModel(&model.IsmsSoftware{})

	tableName := _ismsSoftware.ismsSoftwareDo.TableName()
	_ismsSoftware.ALL = field.NewAsterisk(tableName)
	_ismsSoftware.ID = field.NewInt32(tableName, "id")
	_ismsSoftware.NameZh = field.NewString(tableName, "name_zh")
	_ismsSoftware.NameEn = field.NewString(tableName, "name_en")
	_ismsSoftware.Version = field.NewString(tableName, "version")
	_ismsSoftware.ReleaseYear = field.NewInt32(tableName, "release_year")
	_ismsSoftware.ReleaseMonth = field.NewInt32(tableName, "release_month")
	_ismsSoftware.ReleaseDay = field.NewInt32(tableName, "release_day")
	_ismsSoftware.DeveloperID = field.NewInt32(tableName, "developer_id")
	_ismsSoftware.CountryID = field.NewInt32(tableName, "country_id")
	_ismsSoftware.CPUReq = field.NewString(tableName, "cpu_req")
	_ismsSoftware.MemoryMinGb = field.NewFloat64(tableName, "memory_min_gb")
	_ismsSoftware.DiskMinGb = field.NewFloat64(tableName, "disk_min_gb")
	_ismsSoftware.SysReqOther = field.NewString(tableName, "sys_req_other")
	_ismsSoftware.Description = field.NewString(tableName, "description")
	_ismsSoftware.SizeBytes = field.NewInt64(tableName, "size_bytes")
	_ismsSoftware.DeploymentMethod = field.NewString(tableName, "deployment_method")
	_ismsSoftware.ComplianceInfo = field.NewString(tableName, "compliance_info")
	_ismsSoftware.SecurityInfo = field.NewString(tableName, "security_info")
	_ismsSoftware.IntellectualProperty = field.NewString(tableName, "intellectual_property")
	_ismsSoftware.Status = field.NewString(tableName, "status")
	_ismsSoftware.CreatedAt = field.NewTime(tableName, "created_at")
	_ismsSoftware.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ismsSoftware.BitWidths = field.NewString(tableName, "bit_widths")
	_ismsSoftware.SourceURL = field.NewString(tableName, "source_url")
	_ismsSoftware.DownloadLink = field.NewString(tableName, "download_link")

	_ismsSoftware.fillFieldMap()

	return _ismsSoftware
}

// ismsSoftware 工业软件主表
type ismsSoftware struct {
	ismsSoftwareDo ismsSoftwareDo

	ALL                  field.Asterisk
	ID                   field.Int32   // 自增ID
	NameZh               field.String  // 软件中文名称（不含特殊符号，如：中望CAD）
	NameEn               field.String  // 软件英文名称（不含特殊符号，如：ZWCAD）
	Version              field.String  // 版本号（统一小写，前缀v可选，如v6.2.10、6.2）
	ReleaseYear          field.Int32   // 发布年份（如2023）
	ReleaseMonth         field.Int32   // 发布月份（1-12，NULL表示仅精确到年）
	ReleaseDay           field.Int32   // 发布日（1-31，NULL表示仅精确到年或月）
	DeveloperID          field.Int32   // 开发商ID（关联isms_developer.id）
	CountryID            field.Int32   // 产地国家ID（关联isms_country.id，由developer_id同步）
	CPUReq               field.String  // 处理器要求（如：Intel i5及以上）
	MemoryMinGb          field.Float64 // 最小内存要求（GB）
	DiskMinGb            field.Float64 // 最小磁盘空间（GB）
	SysReqOther          field.String  // 其他系统要求（如显卡、网络）
	Description          field.String  // 软件描述（功能、应用场景等）
	SizeBytes            field.Int64   // 软件实际大小（字节，用于计算和存储，1KB=1024字节）
	DeploymentMethod     field.String  // 部署方式（standalone：单机；cloud：云端；hybrid：混合）
	ComplianceInfo       field.String  // 合规性信息（如认证标准、行业规范）
	SecurityInfo         field.String  // 安全信息（如加密方式、漏洞修复记录）
	IntellectualProperty field.String  // 知识产权信息（如专利号、著作权登记号）
	Status               field.String  // 状态（active：有效；inactive：下架；testing：测试中；discontinued：停止维护）
	CreatedAt            field.Time    // 创建时间
	UpdatedAt            field.Time    // 更新时间
	BitWidths            field.String  // 支持的位宽集合
	SourceURL            field.String  // 来源页面URL
	DownloadLink         field.String  // 下载链接（种子地址等）

	fieldMap map[string]field.Expr
}

func (i ismsSoftware) Table(newTableName string) *ismsSoftware {
	i.ismsSoftwareDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i ismsSoftware) As(alias string) *ismsSoftware {
	i.ismsSoftwareDo.DO = *(i.ismsSoftwareDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *ismsSoftware) updateTableName(table string) *ismsSoftware {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.NameZh = field.NewString(table, "name_zh")
	i.NameEn = field.NewString(table, "name_en")
	i.Version = field.NewString(table, "version")
	i.ReleaseYear = field.NewInt32(table, "release_year")
	i.ReleaseMonth = field.NewInt32(table, "release_month")
	i.ReleaseDay = field.NewInt32(table, "release_day")
	i.DeveloperID = field.NewInt32(table, "developer_id")
	i.CountryID = field.NewInt32(table, "country_id")
	i.CPUReq = field.NewString(table, "cpu_req")
	i.MemoryMinGb = field.NewFloat64(table, "memory_min_gb")
	i.DiskMinGb = field.NewFloat64(table, "disk_min_gb")
	i.SysReqOther = field.NewString(table, "sys_req_other")
	i.Description = field.NewString(table, "description")
	i.SizeBytes = field.NewInt64(table, "size_bytes")
	i.DeploymentMethod = field.NewString(table, "deployment_method")
	i.ComplianceInfo = field.NewString(table, "compliance_info")
	i.SecurityInfo = field.NewString(table, "security_info")
	i.IntellectualProperty = field.NewString(table, "intellectual_property")
	i.Status = field.NewString(table, "status")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.BitWidths = field.NewString(table, "bit_widths")
	i.SourceURL = field.NewString(table, "source_url")
	i.DownloadLink = field.NewString(table, "download_link")

	i.fillFieldMap()

	return i
}

func (i *ismsSoftware) WithContext(ctx context.Context) IIsmsSoftwareDo {
	return i.ismsSoftwareDo.WithContext(ctx)
}

func (i ismsSoftware) TableName() string { return i.ismsSoftwareDo.TableName() }

func (i ismsSoftware) Alias() string { return i.ismsSoftwareDo.Alias() }

func (i ismsSoftware) Columns(cols ...field.Expr) gen.Columns {
	return i.ismsSoftwareDo.Columns(cols...)
}

func (i *ismsSoftware) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *ismsSoftware) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 25)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name_zh"] = i.NameZh
	i.fieldMap["name_en"] = i.NameEn
	i.fieldMap["version"] = i.Version
	i.fieldMap["release_year"] = i.ReleaseYear
	i.fieldMap["release_month"] = i.ReleaseMonth
	i.fieldMap["release_day"] = i.ReleaseDay
	i.fieldMap["developer_id"] = i.DeveloperID
	i.fieldMap["country_id"] = i.CountryID
	i.fieldMap["cpu_req"] = i.CPUReq
	i.fieldMap["memory_min_gb"] = i.MemoryMinGb
	i.fieldMap["disk_min_gb"] = i.DiskMinGb
	i.fieldMap["sys_req_other"] = i.SysReqOther
	i.fieldMap["description"] = i.Description
	i.fieldMap["size_bytes"] = i.SizeBytes
	i.fieldMap["deployment_method"] = i.DeploymentMethod
	i.fieldMap["compliance_info"] = i.ComplianceInfo
	i.fieldMap["security_info"] = i.SecurityInfo
	i.fieldMap["intellectual_property"] = i.IntellectualProperty
	i.fieldMap["status"] = i.Status
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["bit_widths"] = i.BitWidths
	i.fieldMap["source_url"] = i.SourceURL
	i.fieldMap["download_link"] = i.DownloadLink
}

func (i ismsSoftware) clone(db *gorm.DB) ismsSoftware {
	i.ismsSoftwareDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i ismsSoftware) replaceDB(db *gorm.DB) ismsSoftware {
	i.ismsSoftwareDo.ReplaceDB(db)
	return i
}

type ismsSoftwareDo struct{ gen.DO }

type IIsmsSoftwareDo interface {
	gen.SubQuery
	Debug() IIsmsSoftwareDo
	WithContext(ctx context.Context) IIsmsSoftwareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIsmsSoftwareDo
	WriteDB() IIsmsSoftwareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIsmsSoftwareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIsmsSoftwareDo
	Not(conds ...gen.Condition) IIsmsSoftwareDo
	Or(conds ...gen.Condition) IIsmsSoftwareDo
	Select(conds ...field.Expr) IIsmsSoftwareDo
	Where(conds ...gen.Condition) IIsmsSoftwareDo
	Order(conds ...field.Expr) IIsmsSoftwareDo
	Distinct(cols ...field.Expr) IIsmsSoftwareDo
	Omit(cols ...field.Expr) IIsmsSoftwareDo
	Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo
	Group(cols ...field.Expr) IIsmsSoftwareDo
	Having(conds ...gen.Condition) IIsmsSoftwareDo
	Limit(limit int) IIsmsSoftwareDo
	Offset(offset int) IIsmsSoftwareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareDo
	Unscoped() IIsmsSoftwareDo
	Create(values ...*model.IsmsSoftware) error
	CreateInBatches(values []*model.IsmsSoftware, batchSize int) error
	Save(values ...*model.IsmsSoftware) error
	First() (*model.IsmsSoftware, error)
	Take() (*model.IsmsSoftware, error)
	Last() (*model.IsmsSoftware, error)
	Find() ([]*model.IsmsSoftware, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftware, err error)
	FindInBatches(result *[]*model.IsmsSoftware, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.IsmsSoftware) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIsmsSoftwareDo
	Assign(attrs ...field.AssignExpr) IIsmsSoftwareDo
	Joins(fields ...field.RelationField) IIsmsSoftwareDo
	Preload(fields ...field.RelationField) IIsmsSoftwareDo
	FirstOrInit() (*model.IsmsSoftware, error)
	FirstOrCreate() (*model.IsmsSoftware, error)
	FindByPage(offset int, limit int) (result []*model.IsmsSoftware, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIsmsSoftwareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i ismsSoftwareDo) Debug() IIsmsSoftwareDo {
	return i.withDO(i.DO.Debug())
}

func (i ismsSoftwareDo) WithContext(ctx context.Context) IIsmsSoftwareDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i ismsSoftwareDo) ReadDB() IIsmsSoftwareDo {
	return i.Clauses(dbresolver.Read)
}

func (i ismsSoftwareDo) WriteDB() IIsmsSoftwareDo {
	return i.Clauses(dbresolver.Write)
}

func (i ismsSoftwareDo) Session(config *gorm.Session) IIsmsSoftwareDo {
	return i.withDO(i.DO.Session(config))
}

func (i ismsSoftwareDo) Clauses(conds ...clause.Expression) IIsmsSoftwareDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i ismsSoftwareDo) Returning(value interface{}, columns ...string) IIsmsSoftwareDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i ismsSoftwareDo) Not(conds ...gen.Condition) IIsmsSoftwareDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i ismsSoftwareDo) Or(conds ...gen.Condition) IIsmsSoftwareDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i ismsSoftwareDo) Select(conds ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i ismsSoftwareDo) Where(conds ...gen.Condition) IIsmsSoftwareDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i ismsSoftwareDo) Order(conds ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i ismsSoftwareDo) Distinct(cols ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i ismsSoftwareDo) Omit(cols ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i ismsSoftwareDo) Join(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i ismsSoftwareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i ismsSoftwareDo) RightJoin(table schema.Tabler, on ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i ismsSoftwareDo) Group(cols ...field.Expr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i ismsSoftwareDo) Having(conds ...gen.Condition) IIsmsSoftwareDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i ismsSoftwareDo) Limit(limit int) IIsmsSoftwareDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i ismsSoftwareDo) Offset(offset int) IIsmsSoftwareDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i ismsSoftwareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIsmsSoftwareDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i ismsSoftwareDo) Unscoped() IIsmsSoftwareDo {
	return i.withDO(i.DO.Unscoped())
}

func (i ismsSoftwareDo) Create(values ...*model.IsmsSoftware) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i ismsSoftwareDo) CreateInBatches(values []*model.IsmsSoftware, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i ismsSoftwareDo) Save(values ...*model.IsmsSoftware) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i ismsSoftwareDo) First() (*model.IsmsSoftware, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftware), nil
	}
}

func (i ismsSoftwareDo) Take() (*model.IsmsSoftware, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftware), nil
	}
}

func (i ismsSoftwareDo) Last() (*model.IsmsSoftware, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftware), nil
	}
}

func (i ismsSoftwareDo) Find() ([]*model.IsmsSoftware, error) {
	result, err := i.DO.Find()
	return result.([]*model.IsmsSoftware), err
}

func (i ismsSoftwareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IsmsSoftware, err error) {
	buf := make([]*model.IsmsSoftware, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i ismsSoftwareDo) FindInBatches(result *[]*model.IsmsSoftware, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i ismsSoftwareDo) Attrs(attrs ...field.AssignExpr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i ismsSoftwareDo) Assign(attrs ...field.AssignExpr) IIsmsSoftwareDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i ismsSoftwareDo) Joins(fields ...field.RelationField) IIsmsSoftwareDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i ismsSoftwareDo) Preload(fields ...field.RelationField) IIsmsSoftwareDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i ismsSoftwareDo) FirstOrInit() (*model.IsmsSoftware, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftware), nil
	}
}

func (i ismsSoftwareDo) FirstOrCreate() (*model.IsmsSoftware, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IsmsSoftware), nil
	}
}

func (i ismsSoftwareDo) FindByPage(offset int, limit int) (result []*model.IsmsSoftware, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i ismsSoftwareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i ismsSoftwareDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i ismsSoftwareDo) Delete(models ...*model.IsmsSoftware) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *ismsSoftwareDo) withDO(do gen.Dao) *ismsSoftwareDo {
	i.DO = *do.(*gen.DO)
	return i
}
